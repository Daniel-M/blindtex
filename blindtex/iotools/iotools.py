#-*-:coding:utf-8-*-

import os
import copy
import string
import subprocess
from sys import argv

#HU1
#Method to open a file and return its content as a string.
def openFile(fileName):
	'''This function takes a file a return its content as a string.
		Args:
			fileName(str): The name of the file to be oppened.
		Returns:
			str: The content of the file.'''
	try:
		myFile = open(fileName)
		stringDocument = myFile.read()
		myFile.close()
		return stringDocument
	except IOError:
		print "File %s could not be openned."%(fileName)
		return ""
#EndOfFunction

#Replace the document containing the LaTeX math with the output of the function seekAndReplace. Write the content in a new file.
def replaceAndWrite(contentList, replacedDocument, fileName):
	'''Replace the document containing the LaTeX math with the output of the function seekAndReplace. Write the content in a new file.
		Args:
			contentList(list[str,str,str]): The list generated by extractContent.
			replaceDocument(str): the LaTeX content without formulas, just markers.
			fileName(str): The name of the .tex file where the result will be written. '''
	newContentList = copy.deepcopy(contentList)
	newContentList[1] = replacedDocument
	try:
		myFile = open(fileName, 'w')#TODO Check if the file already exits, warn about that and decide if the user wants to replace it.
		myFile.write(string.join(newContentList))
		myFile.close()
	except IOError:
		print "File could not be oppened."
		return

	print "replaceAndWrite completed."
#EndOfFunction

def convertToHtml(fileName, biblioName=None):
	'''This function uses LaTeXML to convert a .tex file in a html with accesible math formulas.
		Args:
			fileName(str): the name of the .tex file to be processed.
			(opt)biblioName(str): the name o a .bib file. '''

	noExtensionName = fileName.replace(".tex","")
	
	if(biblioName):
		noExtensionBiblio = biblioName.replace(".bib","")
		subprocess.call(["latexml","--dest=%s.xml"%(noExtensionName),"--quiet",fileName], shell=True)
		subprocess.call(["latexml", "--dest=%s.xml"%(noExtensionBiblio),"--bibtex", biblioName])#, shell= True)
		subprocess.call(["latexmlpost","-dest=%s.xhtml"%(noExtensionName),"--bibliography=%s.xml"%(noExtensionBiblio),noExtensionName+".xml"], shell=True)
	else:
		subprocess.call(["latexml","--dest=%s.xml"%(noExtensionName),"--quiet",fileName])#, shell= True)#Generates xml file.
		subprocess.call(["latexmlpost","-dest=%s.xhtml"%(noExtensionName),noExtensionName+".xml"])#, shell= True)#Generates xhtml file.

#EndOfFunction




