Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    LARGEOP

Grammar

Rule 0     S' -> start
Rule 1     start -> content
Rule 2     start -> start content
Rule 3     sblock -> BEGINSBLOCK content ENDSBLOCK
Rule 4     block -> BEGINBLOCK content ENDBLOCK
Rule 5     content -> chars
Rule 6     content -> block
Rule 7     content -> scripted
Rule 8     content -> command
Rule 9     chars -> CHAR
Rule 10    chars -> ord
Rule 11    chars -> chars chars
Rule 12    ord -> ORD
Rule 13    command -> frac
Rule 14    command -> root
Rule 15    command -> binop
Rule 16    command -> binrel
Rule 17    command -> not
Rule 18    scripted -> content SUP content
Rule 19    scripted -> content SUB content
Rule 20    frac -> FRAC content content
Rule 21    root -> ROOT content
Rule 22    root -> ROOT sblock content
Rule 23    binop -> BINOP
Rule 24    binop -> KBINOP
Rule 25    binrel -> BINREL
Rule 26    binrel -> KBINREL
Rule 27    not -> NOT

Terminals, with rules where they appear

BEGINBLOCK           : 4
BEGINSBLOCK          : 3
BINOP                : 23
BINREL               : 25
CHAR                 : 9
ENDBLOCK             : 4
ENDSBLOCK            : 3
FRAC                 : 20
KBINOP               : 24
KBINREL              : 26
LARGEOP              : 
NOT                  : 27
ORD                  : 12
ROOT                 : 21 22
SUB                  : 19
SUP                  : 18
error                : 

Nonterminals, with rules where they appear

binop                : 15
binrel               : 16
block                : 6
chars                : 5 11 11
command              : 8
content              : 1 2 3 4 18 18 19 19 20 20 21 22
frac                 : 13
not                  : 17
ord                  : 10
root                 : 14
sblock               : 22
scripted             : 7
start                : 2 0

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . content
    (2) start -> . start content
    (5) content -> . chars
    (6) content -> . block
    (7) content -> . scripted
    (8) content -> . command
    (9) chars -> . CHAR
    (10) chars -> . ord
    (11) chars -> . chars chars
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (18) scripted -> . content SUP content
    (19) scripted -> . content SUB content
    (13) command -> . frac
    (14) command -> . root
    (15) command -> . binop
    (16) command -> . binrel
    (17) command -> . not
    (12) ord -> . ORD
    (20) frac -> . FRAC content content
    (21) root -> . ROOT content
    (22) root -> . ROOT sblock content
    (23) binop -> . BINOP
    (24) binop -> . KBINOP
    (25) binrel -> . BINREL
    (26) binrel -> . KBINREL
    (27) not -> . NOT

    CHAR            shift and go to state 1
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 21
    FRAC            shift and go to state 9
    ROOT            shift and go to state 7
    BINOP           shift and go to state 16
    KBINOP          shift and go to state 14
    BINREL          shift and go to state 10
    KBINREL         shift and go to state 17
    NOT             shift and go to state 20

    frac                           shift and go to state 3
    binop                          shift and go to state 11
    chars                          shift and go to state 12
    content                        shift and go to state 5
    start                          shift and go to state 6
    command                        shift and go to state 18
    block                          shift and go to state 19
    binrel                         shift and go to state 2
    not                            shift and go to state 13
    ord                            shift and go to state 15
    root                           shift and go to state 22
    scripted                       shift and go to state 8

state 1

    (9) chars -> CHAR .

    CHAR            reduce using rule 9 (chars -> CHAR .)
    ORD             reduce using rule 9 (chars -> CHAR .)
    SUP             reduce using rule 9 (chars -> CHAR .)
    SUB             reduce using rule 9 (chars -> CHAR .)
    BEGINBLOCK      reduce using rule 9 (chars -> CHAR .)
    FRAC            reduce using rule 9 (chars -> CHAR .)
    ROOT            reduce using rule 9 (chars -> CHAR .)
    BINOP           reduce using rule 9 (chars -> CHAR .)
    KBINOP          reduce using rule 9 (chars -> CHAR .)
    BINREL          reduce using rule 9 (chars -> CHAR .)
    KBINREL         reduce using rule 9 (chars -> CHAR .)
    NOT             reduce using rule 9 (chars -> CHAR .)
    $end            reduce using rule 9 (chars -> CHAR .)
    ENDBLOCK        reduce using rule 9 (chars -> CHAR .)
    ENDSBLOCK       reduce using rule 9 (chars -> CHAR .)


state 2

    (16) command -> binrel .

    SUP             reduce using rule 16 (command -> binrel .)
    SUB             reduce using rule 16 (command -> binrel .)
    CHAR            reduce using rule 16 (command -> binrel .)
    BEGINBLOCK      reduce using rule 16 (command -> binrel .)
    ORD             reduce using rule 16 (command -> binrel .)
    FRAC            reduce using rule 16 (command -> binrel .)
    ROOT            reduce using rule 16 (command -> binrel .)
    BINOP           reduce using rule 16 (command -> binrel .)
    KBINOP          reduce using rule 16 (command -> binrel .)
    BINREL          reduce using rule 16 (command -> binrel .)
    KBINREL         reduce using rule 16 (command -> binrel .)
    NOT             reduce using rule 16 (command -> binrel .)
    $end            reduce using rule 16 (command -> binrel .)
    ENDBLOCK        reduce using rule 16 (command -> binrel .)
    ENDSBLOCK       reduce using rule 16 (command -> binrel .)


state 3

    (13) command -> frac .

    SUP             reduce using rule 13 (command -> frac .)
    SUB             reduce using rule 13 (command -> frac .)
    CHAR            reduce using rule 13 (command -> frac .)
    BEGINBLOCK      reduce using rule 13 (command -> frac .)
    ORD             reduce using rule 13 (command -> frac .)
    FRAC            reduce using rule 13 (command -> frac .)
    ROOT            reduce using rule 13 (command -> frac .)
    BINOP           reduce using rule 13 (command -> frac .)
    KBINOP          reduce using rule 13 (command -> frac .)
    BINREL          reduce using rule 13 (command -> frac .)
    KBINREL         reduce using rule 13 (command -> frac .)
    NOT             reduce using rule 13 (command -> frac .)
    $end            reduce using rule 13 (command -> frac .)
    ENDBLOCK        reduce using rule 13 (command -> frac .)
    ENDSBLOCK       reduce using rule 13 (command -> frac .)


state 4

    (4) block -> BEGINBLOCK . content ENDBLOCK
    (5) content -> . chars
    (6) content -> . block
    (7) content -> . scripted
    (8) content -> . command
    (9) chars -> . CHAR
    (10) chars -> . ord
    (11) chars -> . chars chars
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (18) scripted -> . content SUP content
    (19) scripted -> . content SUB content
    (13) command -> . frac
    (14) command -> . root
    (15) command -> . binop
    (16) command -> . binrel
    (17) command -> . not
    (12) ord -> . ORD
    (20) frac -> . FRAC content content
    (21) root -> . ROOT content
    (22) root -> . ROOT sblock content
    (23) binop -> . BINOP
    (24) binop -> . KBINOP
    (25) binrel -> . BINREL
    (26) binrel -> . KBINREL
    (27) not -> . NOT

    CHAR            shift and go to state 1
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 21
    FRAC            shift and go to state 9
    ROOT            shift and go to state 7
    BINOP           shift and go to state 16
    KBINOP          shift and go to state 14
    BINREL          shift and go to state 10
    KBINREL         shift and go to state 17
    NOT             shift and go to state 20

    frac                           shift and go to state 3
    binop                          shift and go to state 11
    chars                          shift and go to state 12
    content                        shift and go to state 23
    command                        shift and go to state 18
    block                          shift and go to state 19
    binrel                         shift and go to state 2
    not                            shift and go to state 13
    ord                            shift and go to state 15
    root                           shift and go to state 22
    scripted                       shift and go to state 8

state 5

    (1) start -> content .
    (18) scripted -> content . SUP content
    (19) scripted -> content . SUB content

    CHAR            reduce using rule 1 (start -> content .)
    BEGINBLOCK      reduce using rule 1 (start -> content .)
    ORD             reduce using rule 1 (start -> content .)
    FRAC            reduce using rule 1 (start -> content .)
    ROOT            reduce using rule 1 (start -> content .)
    BINOP           reduce using rule 1 (start -> content .)
    KBINOP          reduce using rule 1 (start -> content .)
    BINREL          reduce using rule 1 (start -> content .)
    KBINREL         reduce using rule 1 (start -> content .)
    NOT             reduce using rule 1 (start -> content .)
    $end            reduce using rule 1 (start -> content .)
    SUP             shift and go to state 25
    SUB             shift and go to state 24


state 6

    (0) S' -> start .
    (2) start -> start . content
    (5) content -> . chars
    (6) content -> . block
    (7) content -> . scripted
    (8) content -> . command
    (9) chars -> . CHAR
    (10) chars -> . ord
    (11) chars -> . chars chars
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (18) scripted -> . content SUP content
    (19) scripted -> . content SUB content
    (13) command -> . frac
    (14) command -> . root
    (15) command -> . binop
    (16) command -> . binrel
    (17) command -> . not
    (12) ord -> . ORD
    (20) frac -> . FRAC content content
    (21) root -> . ROOT content
    (22) root -> . ROOT sblock content
    (23) binop -> . BINOP
    (24) binop -> . KBINOP
    (25) binrel -> . BINREL
    (26) binrel -> . KBINREL
    (27) not -> . NOT

    CHAR            shift and go to state 1
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 21
    FRAC            shift and go to state 9
    ROOT            shift and go to state 7
    BINOP           shift and go to state 16
    KBINOP          shift and go to state 14
    BINREL          shift and go to state 10
    KBINREL         shift and go to state 17
    NOT             shift and go to state 20

    frac                           shift and go to state 3
    binop                          shift and go to state 11
    chars                          shift and go to state 12
    content                        shift and go to state 26
    command                        shift and go to state 18
    block                          shift and go to state 19
    binrel                         shift and go to state 2
    not                            shift and go to state 13
    ord                            shift and go to state 15
    root                           shift and go to state 22
    scripted                       shift and go to state 8

state 7

    (21) root -> ROOT . content
    (22) root -> ROOT . sblock content
    (5) content -> . chars
    (6) content -> . block
    (7) content -> . scripted
    (8) content -> . command
    (3) sblock -> . BEGINSBLOCK content ENDSBLOCK
    (9) chars -> . CHAR
    (10) chars -> . ord
    (11) chars -> . chars chars
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (18) scripted -> . content SUP content
    (19) scripted -> . content SUB content
    (13) command -> . frac
    (14) command -> . root
    (15) command -> . binop
    (16) command -> . binrel
    (17) command -> . not
    (12) ord -> . ORD
    (20) frac -> . FRAC content content
    (21) root -> . ROOT content
    (22) root -> . ROOT sblock content
    (23) binop -> . BINOP
    (24) binop -> . KBINOP
    (25) binrel -> . BINREL
    (26) binrel -> . KBINREL
    (27) not -> . NOT

    BEGINSBLOCK     shift and go to state 28
    CHAR            shift and go to state 1
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 21
    FRAC            shift and go to state 9
    ROOT            shift and go to state 7
    BINOP           shift and go to state 16
    KBINOP          shift and go to state 14
    BINREL          shift and go to state 10
    KBINREL         shift and go to state 17
    NOT             shift and go to state 20

    frac                           shift and go to state 3
    binop                          shift and go to state 11
    chars                          shift and go to state 12
    sblock                         shift and go to state 29
    content                        shift and go to state 27
    command                        shift and go to state 18
    block                          shift and go to state 19
    binrel                         shift and go to state 2
    not                            shift and go to state 13
    ord                            shift and go to state 15
    root                           shift and go to state 22
    scripted                       shift and go to state 8

state 8

    (7) content -> scripted .

    SUP             reduce using rule 7 (content -> scripted .)
    SUB             reduce using rule 7 (content -> scripted .)
    CHAR            reduce using rule 7 (content -> scripted .)
    BEGINBLOCK      reduce using rule 7 (content -> scripted .)
    ORD             reduce using rule 7 (content -> scripted .)
    FRAC            reduce using rule 7 (content -> scripted .)
    ROOT            reduce using rule 7 (content -> scripted .)
    BINOP           reduce using rule 7 (content -> scripted .)
    KBINOP          reduce using rule 7 (content -> scripted .)
    BINREL          reduce using rule 7 (content -> scripted .)
    KBINREL         reduce using rule 7 (content -> scripted .)
    NOT             reduce using rule 7 (content -> scripted .)
    $end            reduce using rule 7 (content -> scripted .)
    ENDBLOCK        reduce using rule 7 (content -> scripted .)
    ENDSBLOCK       reduce using rule 7 (content -> scripted .)


state 9

    (20) frac -> FRAC . content content
    (5) content -> . chars
    (6) content -> . block
    (7) content -> . scripted
    (8) content -> . command
    (9) chars -> . CHAR
    (10) chars -> . ord
    (11) chars -> . chars chars
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (18) scripted -> . content SUP content
    (19) scripted -> . content SUB content
    (13) command -> . frac
    (14) command -> . root
    (15) command -> . binop
    (16) command -> . binrel
    (17) command -> . not
    (12) ord -> . ORD
    (20) frac -> . FRAC content content
    (21) root -> . ROOT content
    (22) root -> . ROOT sblock content
    (23) binop -> . BINOP
    (24) binop -> . KBINOP
    (25) binrel -> . BINREL
    (26) binrel -> . KBINREL
    (27) not -> . NOT

    CHAR            shift and go to state 1
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 21
    FRAC            shift and go to state 9
    ROOT            shift and go to state 7
    BINOP           shift and go to state 16
    KBINOP          shift and go to state 14
    BINREL          shift and go to state 10
    KBINREL         shift and go to state 17
    NOT             shift and go to state 20

    frac                           shift and go to state 3
    binop                          shift and go to state 11
    chars                          shift and go to state 12
    content                        shift and go to state 30
    command                        shift and go to state 18
    block                          shift and go to state 19
    binrel                         shift and go to state 2
    not                            shift and go to state 13
    ord                            shift and go to state 15
    root                           shift and go to state 22
    scripted                       shift and go to state 8

state 10

    (25) binrel -> BINREL .

    ENDBLOCK        reduce using rule 25 (binrel -> BINREL .)
    SUP             reduce using rule 25 (binrel -> BINREL .)
    SUB             reduce using rule 25 (binrel -> BINREL .)
    CHAR            reduce using rule 25 (binrel -> BINREL .)
    BEGINBLOCK      reduce using rule 25 (binrel -> BINREL .)
    ORD             reduce using rule 25 (binrel -> BINREL .)
    FRAC            reduce using rule 25 (binrel -> BINREL .)
    ROOT            reduce using rule 25 (binrel -> BINREL .)
    BINOP           reduce using rule 25 (binrel -> BINREL .)
    KBINOP          reduce using rule 25 (binrel -> BINREL .)
    BINREL          reduce using rule 25 (binrel -> BINREL .)
    KBINREL         reduce using rule 25 (binrel -> BINREL .)
    NOT             reduce using rule 25 (binrel -> BINREL .)
    $end            reduce using rule 25 (binrel -> BINREL .)
    ENDSBLOCK       reduce using rule 25 (binrel -> BINREL .)


state 11

    (15) command -> binop .

    SUP             reduce using rule 15 (command -> binop .)
    SUB             reduce using rule 15 (command -> binop .)
    CHAR            reduce using rule 15 (command -> binop .)
    BEGINBLOCK      reduce using rule 15 (command -> binop .)
    ORD             reduce using rule 15 (command -> binop .)
    FRAC            reduce using rule 15 (command -> binop .)
    ROOT            reduce using rule 15 (command -> binop .)
    BINOP           reduce using rule 15 (command -> binop .)
    KBINOP          reduce using rule 15 (command -> binop .)
    BINREL          reduce using rule 15 (command -> binop .)
    KBINREL         reduce using rule 15 (command -> binop .)
    NOT             reduce using rule 15 (command -> binop .)
    $end            reduce using rule 15 (command -> binop .)
    ENDBLOCK        reduce using rule 15 (command -> binop .)
    ENDSBLOCK       reduce using rule 15 (command -> binop .)


state 12

    (5) content -> chars .
    (11) chars -> chars . chars
    (9) chars -> . CHAR
    (10) chars -> . ord
    (11) chars -> . chars chars
    (12) ord -> . ORD

  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for ORD resolved as shift
    SUP             reduce using rule 5 (content -> chars .)
    SUB             reduce using rule 5 (content -> chars .)
    BEGINBLOCK      reduce using rule 5 (content -> chars .)
    FRAC            reduce using rule 5 (content -> chars .)
    ROOT            reduce using rule 5 (content -> chars .)
    BINOP           reduce using rule 5 (content -> chars .)
    KBINOP          reduce using rule 5 (content -> chars .)
    BINREL          reduce using rule 5 (content -> chars .)
    KBINREL         reduce using rule 5 (content -> chars .)
    NOT             reduce using rule 5 (content -> chars .)
    $end            reduce using rule 5 (content -> chars .)
    ENDBLOCK        reduce using rule 5 (content -> chars .)
    ENDSBLOCK       reduce using rule 5 (content -> chars .)
    CHAR            shift and go to state 1
    ORD             shift and go to state 21

  ! CHAR            [ reduce using rule 5 (content -> chars .) ]
  ! ORD             [ reduce using rule 5 (content -> chars .) ]

    chars                          shift and go to state 31
    ord                            shift and go to state 15

state 13

    (17) command -> not .

    SUP             reduce using rule 17 (command -> not .)
    SUB             reduce using rule 17 (command -> not .)
    CHAR            reduce using rule 17 (command -> not .)
    BEGINBLOCK      reduce using rule 17 (command -> not .)
    ORD             reduce using rule 17 (command -> not .)
    FRAC            reduce using rule 17 (command -> not .)
    ROOT            reduce using rule 17 (command -> not .)
    BINOP           reduce using rule 17 (command -> not .)
    KBINOP          reduce using rule 17 (command -> not .)
    BINREL          reduce using rule 17 (command -> not .)
    KBINREL         reduce using rule 17 (command -> not .)
    NOT             reduce using rule 17 (command -> not .)
    $end            reduce using rule 17 (command -> not .)
    ENDBLOCK        reduce using rule 17 (command -> not .)
    ENDSBLOCK       reduce using rule 17 (command -> not .)


state 14

    (24) binop -> KBINOP .

    SUP             reduce using rule 24 (binop -> KBINOP .)
    SUB             reduce using rule 24 (binop -> KBINOP .)
    CHAR            reduce using rule 24 (binop -> KBINOP .)
    BEGINBLOCK      reduce using rule 24 (binop -> KBINOP .)
    ORD             reduce using rule 24 (binop -> KBINOP .)
    FRAC            reduce using rule 24 (binop -> KBINOP .)
    ROOT            reduce using rule 24 (binop -> KBINOP .)
    BINOP           reduce using rule 24 (binop -> KBINOP .)
    KBINOP          reduce using rule 24 (binop -> KBINOP .)
    BINREL          reduce using rule 24 (binop -> KBINOP .)
    KBINREL         reduce using rule 24 (binop -> KBINOP .)
    NOT             reduce using rule 24 (binop -> KBINOP .)
    $end            reduce using rule 24 (binop -> KBINOP .)
    ENDBLOCK        reduce using rule 24 (binop -> KBINOP .)
    ENDSBLOCK       reduce using rule 24 (binop -> KBINOP .)


state 15

    (10) chars -> ord .

    CHAR            reduce using rule 10 (chars -> ord .)
    ORD             reduce using rule 10 (chars -> ord .)
    SUP             reduce using rule 10 (chars -> ord .)
    SUB             reduce using rule 10 (chars -> ord .)
    BEGINBLOCK      reduce using rule 10 (chars -> ord .)
    FRAC            reduce using rule 10 (chars -> ord .)
    ROOT            reduce using rule 10 (chars -> ord .)
    BINOP           reduce using rule 10 (chars -> ord .)
    KBINOP          reduce using rule 10 (chars -> ord .)
    BINREL          reduce using rule 10 (chars -> ord .)
    KBINREL         reduce using rule 10 (chars -> ord .)
    NOT             reduce using rule 10 (chars -> ord .)
    $end            reduce using rule 10 (chars -> ord .)
    ENDBLOCK        reduce using rule 10 (chars -> ord .)
    ENDSBLOCK       reduce using rule 10 (chars -> ord .)


state 16

    (23) binop -> BINOP .

    SUP             reduce using rule 23 (binop -> BINOP .)
    SUB             reduce using rule 23 (binop -> BINOP .)
    CHAR            reduce using rule 23 (binop -> BINOP .)
    BEGINBLOCK      reduce using rule 23 (binop -> BINOP .)
    ORD             reduce using rule 23 (binop -> BINOP .)
    FRAC            reduce using rule 23 (binop -> BINOP .)
    ROOT            reduce using rule 23 (binop -> BINOP .)
    BINOP           reduce using rule 23 (binop -> BINOP .)
    KBINOP          reduce using rule 23 (binop -> BINOP .)
    BINREL          reduce using rule 23 (binop -> BINOP .)
    KBINREL         reduce using rule 23 (binop -> BINOP .)
    NOT             reduce using rule 23 (binop -> BINOP .)
    $end            reduce using rule 23 (binop -> BINOP .)
    ENDBLOCK        reduce using rule 23 (binop -> BINOP .)
    ENDSBLOCK       reduce using rule 23 (binop -> BINOP .)


state 17

    (26) binrel -> KBINREL .

    ENDBLOCK        reduce using rule 26 (binrel -> KBINREL .)
    SUP             reduce using rule 26 (binrel -> KBINREL .)
    SUB             reduce using rule 26 (binrel -> KBINREL .)
    CHAR            reduce using rule 26 (binrel -> KBINREL .)
    BEGINBLOCK      reduce using rule 26 (binrel -> KBINREL .)
    ORD             reduce using rule 26 (binrel -> KBINREL .)
    FRAC            reduce using rule 26 (binrel -> KBINREL .)
    ROOT            reduce using rule 26 (binrel -> KBINREL .)
    BINOP           reduce using rule 26 (binrel -> KBINREL .)
    KBINOP          reduce using rule 26 (binrel -> KBINREL .)
    BINREL          reduce using rule 26 (binrel -> KBINREL .)
    KBINREL         reduce using rule 26 (binrel -> KBINREL .)
    NOT             reduce using rule 26 (binrel -> KBINREL .)
    $end            reduce using rule 26 (binrel -> KBINREL .)
    ENDSBLOCK       reduce using rule 26 (binrel -> KBINREL .)


state 18

    (8) content -> command .

    SUP             reduce using rule 8 (content -> command .)
    SUB             reduce using rule 8 (content -> command .)
    CHAR            reduce using rule 8 (content -> command .)
    BEGINBLOCK      reduce using rule 8 (content -> command .)
    ORD             reduce using rule 8 (content -> command .)
    FRAC            reduce using rule 8 (content -> command .)
    ROOT            reduce using rule 8 (content -> command .)
    BINOP           reduce using rule 8 (content -> command .)
    KBINOP          reduce using rule 8 (content -> command .)
    BINREL          reduce using rule 8 (content -> command .)
    KBINREL         reduce using rule 8 (content -> command .)
    NOT             reduce using rule 8 (content -> command .)
    $end            reduce using rule 8 (content -> command .)
    ENDBLOCK        reduce using rule 8 (content -> command .)
    ENDSBLOCK       reduce using rule 8 (content -> command .)


state 19

    (6) content -> block .

    SUP             reduce using rule 6 (content -> block .)
    SUB             reduce using rule 6 (content -> block .)
    CHAR            reduce using rule 6 (content -> block .)
    BEGINBLOCK      reduce using rule 6 (content -> block .)
    ORD             reduce using rule 6 (content -> block .)
    FRAC            reduce using rule 6 (content -> block .)
    ROOT            reduce using rule 6 (content -> block .)
    BINOP           reduce using rule 6 (content -> block .)
    KBINOP          reduce using rule 6 (content -> block .)
    BINREL          reduce using rule 6 (content -> block .)
    KBINREL         reduce using rule 6 (content -> block .)
    NOT             reduce using rule 6 (content -> block .)
    $end            reduce using rule 6 (content -> block .)
    ENDBLOCK        reduce using rule 6 (content -> block .)
    ENDSBLOCK       reduce using rule 6 (content -> block .)


state 20

    (27) not -> NOT .

    ENDSBLOCK       reduce using rule 27 (not -> NOT .)
    SUP             reduce using rule 27 (not -> NOT .)
    SUB             reduce using rule 27 (not -> NOT .)
    CHAR            reduce using rule 27 (not -> NOT .)
    BEGINBLOCK      reduce using rule 27 (not -> NOT .)
    ORD             reduce using rule 27 (not -> NOT .)
    FRAC            reduce using rule 27 (not -> NOT .)
    ROOT            reduce using rule 27 (not -> NOT .)
    BINOP           reduce using rule 27 (not -> NOT .)
    KBINOP          reduce using rule 27 (not -> NOT .)
    BINREL          reduce using rule 27 (not -> NOT .)
    KBINREL         reduce using rule 27 (not -> NOT .)
    NOT             reduce using rule 27 (not -> NOT .)
    $end            reduce using rule 27 (not -> NOT .)
    ENDBLOCK        reduce using rule 27 (not -> NOT .)


state 21

    (12) ord -> ORD .

    CHAR            reduce using rule 12 (ord -> ORD .)
    ORD             reduce using rule 12 (ord -> ORD .)
    SUP             reduce using rule 12 (ord -> ORD .)
    SUB             reduce using rule 12 (ord -> ORD .)
    BEGINBLOCK      reduce using rule 12 (ord -> ORD .)
    FRAC            reduce using rule 12 (ord -> ORD .)
    ROOT            reduce using rule 12 (ord -> ORD .)
    BINOP           reduce using rule 12 (ord -> ORD .)
    KBINOP          reduce using rule 12 (ord -> ORD .)
    BINREL          reduce using rule 12 (ord -> ORD .)
    KBINREL         reduce using rule 12 (ord -> ORD .)
    NOT             reduce using rule 12 (ord -> ORD .)
    $end            reduce using rule 12 (ord -> ORD .)
    ENDBLOCK        reduce using rule 12 (ord -> ORD .)
    ENDSBLOCK       reduce using rule 12 (ord -> ORD .)


state 22

    (14) command -> root .

    SUP             reduce using rule 14 (command -> root .)
    SUB             reduce using rule 14 (command -> root .)
    CHAR            reduce using rule 14 (command -> root .)
    BEGINBLOCK      reduce using rule 14 (command -> root .)
    ORD             reduce using rule 14 (command -> root .)
    FRAC            reduce using rule 14 (command -> root .)
    ROOT            reduce using rule 14 (command -> root .)
    BINOP           reduce using rule 14 (command -> root .)
    KBINOP          reduce using rule 14 (command -> root .)
    BINREL          reduce using rule 14 (command -> root .)
    KBINREL         reduce using rule 14 (command -> root .)
    NOT             reduce using rule 14 (command -> root .)
    $end            reduce using rule 14 (command -> root .)
    ENDBLOCK        reduce using rule 14 (command -> root .)
    ENDSBLOCK       reduce using rule 14 (command -> root .)


state 23

    (4) block -> BEGINBLOCK content . ENDBLOCK
    (18) scripted -> content . SUP content
    (19) scripted -> content . SUB content

    ENDBLOCK        shift and go to state 32
    SUP             shift and go to state 25
    SUB             shift and go to state 24


state 24

    (19) scripted -> content SUB . content
    (5) content -> . chars
    (6) content -> . block
    (7) content -> . scripted
    (8) content -> . command
    (9) chars -> . CHAR
    (10) chars -> . ord
    (11) chars -> . chars chars
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (18) scripted -> . content SUP content
    (19) scripted -> . content SUB content
    (13) command -> . frac
    (14) command -> . root
    (15) command -> . binop
    (16) command -> . binrel
    (17) command -> . not
    (12) ord -> . ORD
    (20) frac -> . FRAC content content
    (21) root -> . ROOT content
    (22) root -> . ROOT sblock content
    (23) binop -> . BINOP
    (24) binop -> . KBINOP
    (25) binrel -> . BINREL
    (26) binrel -> . KBINREL
    (27) not -> . NOT

    CHAR            shift and go to state 1
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 21
    FRAC            shift and go to state 9
    ROOT            shift and go to state 7
    BINOP           shift and go to state 16
    KBINOP          shift and go to state 14
    BINREL          shift and go to state 10
    KBINREL         shift and go to state 17
    NOT             shift and go to state 20

    frac                           shift and go to state 3
    binop                          shift and go to state 11
    chars                          shift and go to state 12
    content                        shift and go to state 33
    command                        shift and go to state 18
    block                          shift and go to state 19
    binrel                         shift and go to state 2
    not                            shift and go to state 13
    ord                            shift and go to state 15
    root                           shift and go to state 22
    scripted                       shift and go to state 8

state 25

    (18) scripted -> content SUP . content
    (5) content -> . chars
    (6) content -> . block
    (7) content -> . scripted
    (8) content -> . command
    (9) chars -> . CHAR
    (10) chars -> . ord
    (11) chars -> . chars chars
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (18) scripted -> . content SUP content
    (19) scripted -> . content SUB content
    (13) command -> . frac
    (14) command -> . root
    (15) command -> . binop
    (16) command -> . binrel
    (17) command -> . not
    (12) ord -> . ORD
    (20) frac -> . FRAC content content
    (21) root -> . ROOT content
    (22) root -> . ROOT sblock content
    (23) binop -> . BINOP
    (24) binop -> . KBINOP
    (25) binrel -> . BINREL
    (26) binrel -> . KBINREL
    (27) not -> . NOT

    CHAR            shift and go to state 1
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 21
    FRAC            shift and go to state 9
    ROOT            shift and go to state 7
    BINOP           shift and go to state 16
    KBINOP          shift and go to state 14
    BINREL          shift and go to state 10
    KBINREL         shift and go to state 17
    NOT             shift and go to state 20

    frac                           shift and go to state 3
    binop                          shift and go to state 11
    chars                          shift and go to state 12
    content                        shift and go to state 34
    command                        shift and go to state 18
    block                          shift and go to state 19
    binrel                         shift and go to state 2
    not                            shift and go to state 13
    ord                            shift and go to state 15
    root                           shift and go to state 22
    scripted                       shift and go to state 8

state 26

    (2) start -> start content .
    (18) scripted -> content . SUP content
    (19) scripted -> content . SUB content

    CHAR            reduce using rule 2 (start -> start content .)
    BEGINBLOCK      reduce using rule 2 (start -> start content .)
    ORD             reduce using rule 2 (start -> start content .)
    FRAC            reduce using rule 2 (start -> start content .)
    ROOT            reduce using rule 2 (start -> start content .)
    BINOP           reduce using rule 2 (start -> start content .)
    KBINOP          reduce using rule 2 (start -> start content .)
    BINREL          reduce using rule 2 (start -> start content .)
    KBINREL         reduce using rule 2 (start -> start content .)
    NOT             reduce using rule 2 (start -> start content .)
    $end            reduce using rule 2 (start -> start content .)
    SUP             shift and go to state 25
    SUB             shift and go to state 24


state 27

    (21) root -> ROOT content .
    (18) scripted -> content . SUP content
    (19) scripted -> content . SUB content

    SUP             reduce using rule 21 (root -> ROOT content .)
    SUB             reduce using rule 21 (root -> ROOT content .)
    CHAR            reduce using rule 21 (root -> ROOT content .)
    BEGINBLOCK      reduce using rule 21 (root -> ROOT content .)
    ORD             reduce using rule 21 (root -> ROOT content .)
    FRAC            reduce using rule 21 (root -> ROOT content .)
    ROOT            reduce using rule 21 (root -> ROOT content .)
    BINOP           reduce using rule 21 (root -> ROOT content .)
    KBINOP          reduce using rule 21 (root -> ROOT content .)
    BINREL          reduce using rule 21 (root -> ROOT content .)
    KBINREL         reduce using rule 21 (root -> ROOT content .)
    NOT             reduce using rule 21 (root -> ROOT content .)
    $end            reduce using rule 21 (root -> ROOT content .)
    ENDBLOCK        reduce using rule 21 (root -> ROOT content .)
    ENDSBLOCK       reduce using rule 21 (root -> ROOT content .)

  ! SUP             [ shift and go to state 25 ]
  ! SUB             [ shift and go to state 24 ]


state 28

    (3) sblock -> BEGINSBLOCK . content ENDSBLOCK
    (5) content -> . chars
    (6) content -> . block
    (7) content -> . scripted
    (8) content -> . command
    (9) chars -> . CHAR
    (10) chars -> . ord
    (11) chars -> . chars chars
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (18) scripted -> . content SUP content
    (19) scripted -> . content SUB content
    (13) command -> . frac
    (14) command -> . root
    (15) command -> . binop
    (16) command -> . binrel
    (17) command -> . not
    (12) ord -> . ORD
    (20) frac -> . FRAC content content
    (21) root -> . ROOT content
    (22) root -> . ROOT sblock content
    (23) binop -> . BINOP
    (24) binop -> . KBINOP
    (25) binrel -> . BINREL
    (26) binrel -> . KBINREL
    (27) not -> . NOT

    CHAR            shift and go to state 1
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 21
    FRAC            shift and go to state 9
    ROOT            shift and go to state 7
    BINOP           shift and go to state 16
    KBINOP          shift and go to state 14
    BINREL          shift and go to state 10
    KBINREL         shift and go to state 17
    NOT             shift and go to state 20

    frac                           shift and go to state 3
    binop                          shift and go to state 11
    chars                          shift and go to state 12
    content                        shift and go to state 35
    command                        shift and go to state 18
    block                          shift and go to state 19
    binrel                         shift and go to state 2
    not                            shift and go to state 13
    ord                            shift and go to state 15
    root                           shift and go to state 22
    scripted                       shift and go to state 8

state 29

    (22) root -> ROOT sblock . content
    (5) content -> . chars
    (6) content -> . block
    (7) content -> . scripted
    (8) content -> . command
    (9) chars -> . CHAR
    (10) chars -> . ord
    (11) chars -> . chars chars
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (18) scripted -> . content SUP content
    (19) scripted -> . content SUB content
    (13) command -> . frac
    (14) command -> . root
    (15) command -> . binop
    (16) command -> . binrel
    (17) command -> . not
    (12) ord -> . ORD
    (20) frac -> . FRAC content content
    (21) root -> . ROOT content
    (22) root -> . ROOT sblock content
    (23) binop -> . BINOP
    (24) binop -> . KBINOP
    (25) binrel -> . BINREL
    (26) binrel -> . KBINREL
    (27) not -> . NOT

    CHAR            shift and go to state 1
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 21
    FRAC            shift and go to state 9
    ROOT            shift and go to state 7
    BINOP           shift and go to state 16
    KBINOP          shift and go to state 14
    BINREL          shift and go to state 10
    KBINREL         shift and go to state 17
    NOT             shift and go to state 20

    frac                           shift and go to state 3
    binop                          shift and go to state 11
    chars                          shift and go to state 12
    content                        shift and go to state 36
    command                        shift and go to state 18
    block                          shift and go to state 19
    binrel                         shift and go to state 2
    not                            shift and go to state 13
    ord                            shift and go to state 15
    root                           shift and go to state 22
    scripted                       shift and go to state 8

state 30

    (20) frac -> FRAC content . content
    (18) scripted -> content . SUP content
    (19) scripted -> content . SUB content
    (5) content -> . chars
    (6) content -> . block
    (7) content -> . scripted
    (8) content -> . command
    (9) chars -> . CHAR
    (10) chars -> . ord
    (11) chars -> . chars chars
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (18) scripted -> . content SUP content
    (19) scripted -> . content SUB content
    (13) command -> . frac
    (14) command -> . root
    (15) command -> . binop
    (16) command -> . binrel
    (17) command -> . not
    (12) ord -> . ORD
    (20) frac -> . FRAC content content
    (21) root -> . ROOT content
    (22) root -> . ROOT sblock content
    (23) binop -> . BINOP
    (24) binop -> . KBINOP
    (25) binrel -> . BINREL
    (26) binrel -> . KBINREL
    (27) not -> . NOT

    SUP             shift and go to state 25
    SUB             shift and go to state 24
    CHAR            shift and go to state 1
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 21
    FRAC            shift and go to state 9
    ROOT            shift and go to state 7
    BINOP           shift and go to state 16
    KBINOP          shift and go to state 14
    BINREL          shift and go to state 10
    KBINREL         shift and go to state 17
    NOT             shift and go to state 20

    frac                           shift and go to state 3
    binop                          shift and go to state 11
    chars                          shift and go to state 12
    content                        shift and go to state 37
    command                        shift and go to state 18
    block                          shift and go to state 19
    binrel                         shift and go to state 2
    not                            shift and go to state 13
    ord                            shift and go to state 15
    root                           shift and go to state 22
    scripted                       shift and go to state 8

state 31

    (11) chars -> chars chars .
    (11) chars -> chars . chars
    (9) chars -> . CHAR
    (10) chars -> . ord
    (11) chars -> . chars chars
    (12) ord -> . ORD

  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for ORD resolved as shift
    SUP             reduce using rule 11 (chars -> chars chars .)
    SUB             reduce using rule 11 (chars -> chars chars .)
    BEGINBLOCK      reduce using rule 11 (chars -> chars chars .)
    FRAC            reduce using rule 11 (chars -> chars chars .)
    ROOT            reduce using rule 11 (chars -> chars chars .)
    BINOP           reduce using rule 11 (chars -> chars chars .)
    KBINOP          reduce using rule 11 (chars -> chars chars .)
    BINREL          reduce using rule 11 (chars -> chars chars .)
    KBINREL         reduce using rule 11 (chars -> chars chars .)
    NOT             reduce using rule 11 (chars -> chars chars .)
    $end            reduce using rule 11 (chars -> chars chars .)
    ENDBLOCK        reduce using rule 11 (chars -> chars chars .)
    ENDSBLOCK       reduce using rule 11 (chars -> chars chars .)
    CHAR            shift and go to state 1
    ORD             shift and go to state 21

  ! CHAR            [ reduce using rule 11 (chars -> chars chars .) ]
  ! ORD             [ reduce using rule 11 (chars -> chars chars .) ]

    chars                          shift and go to state 31
    ord                            shift and go to state 15

state 32

    (4) block -> BEGINBLOCK content ENDBLOCK .

    SUP             reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    SUB             reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    CHAR            reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    BEGINBLOCK      reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    ORD             reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    FRAC            reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    ROOT            reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    BINOP           reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    KBINOP          reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    BINREL          reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    KBINREL         reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    NOT             reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    $end            reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    ENDBLOCK        reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    ENDSBLOCK       reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)


state 33

    (19) scripted -> content SUB content .
    (18) scripted -> content . SUP content
    (19) scripted -> content . SUB content

    SUP             reduce using rule 19 (scripted -> content SUB content .)
    SUB             reduce using rule 19 (scripted -> content SUB content .)
    CHAR            reduce using rule 19 (scripted -> content SUB content .)
    BEGINBLOCK      reduce using rule 19 (scripted -> content SUB content .)
    ORD             reduce using rule 19 (scripted -> content SUB content .)
    FRAC            reduce using rule 19 (scripted -> content SUB content .)
    ROOT            reduce using rule 19 (scripted -> content SUB content .)
    BINOP           reduce using rule 19 (scripted -> content SUB content .)
    KBINOP          reduce using rule 19 (scripted -> content SUB content .)
    BINREL          reduce using rule 19 (scripted -> content SUB content .)
    KBINREL         reduce using rule 19 (scripted -> content SUB content .)
    NOT             reduce using rule 19 (scripted -> content SUB content .)
    $end            reduce using rule 19 (scripted -> content SUB content .)
    ENDBLOCK        reduce using rule 19 (scripted -> content SUB content .)
    ENDSBLOCK       reduce using rule 19 (scripted -> content SUB content .)

  ! SUP             [ shift and go to state 25 ]
  ! SUB             [ shift and go to state 24 ]


state 34

    (18) scripted -> content SUP content .
    (18) scripted -> content . SUP content
    (19) scripted -> content . SUB content

    SUP             reduce using rule 18 (scripted -> content SUP content .)
    SUB             reduce using rule 18 (scripted -> content SUP content .)
    CHAR            reduce using rule 18 (scripted -> content SUP content .)
    BEGINBLOCK      reduce using rule 18 (scripted -> content SUP content .)
    ORD             reduce using rule 18 (scripted -> content SUP content .)
    FRAC            reduce using rule 18 (scripted -> content SUP content .)
    ROOT            reduce using rule 18 (scripted -> content SUP content .)
    BINOP           reduce using rule 18 (scripted -> content SUP content .)
    KBINOP          reduce using rule 18 (scripted -> content SUP content .)
    BINREL          reduce using rule 18 (scripted -> content SUP content .)
    KBINREL         reduce using rule 18 (scripted -> content SUP content .)
    NOT             reduce using rule 18 (scripted -> content SUP content .)
    $end            reduce using rule 18 (scripted -> content SUP content .)
    ENDBLOCK        reduce using rule 18 (scripted -> content SUP content .)
    ENDSBLOCK       reduce using rule 18 (scripted -> content SUP content .)

  ! SUP             [ shift and go to state 25 ]
  ! SUB             [ shift and go to state 24 ]


state 35

    (3) sblock -> BEGINSBLOCK content . ENDSBLOCK
    (18) scripted -> content . SUP content
    (19) scripted -> content . SUB content

    ENDSBLOCK       shift and go to state 38
    SUP             shift and go to state 25
    SUB             shift and go to state 24


state 36

    (22) root -> ROOT sblock content .
    (18) scripted -> content . SUP content
    (19) scripted -> content . SUB content

    SUP             reduce using rule 22 (root -> ROOT sblock content .)
    SUB             reduce using rule 22 (root -> ROOT sblock content .)
    CHAR            reduce using rule 22 (root -> ROOT sblock content .)
    BEGINBLOCK      reduce using rule 22 (root -> ROOT sblock content .)
    ORD             reduce using rule 22 (root -> ROOT sblock content .)
    FRAC            reduce using rule 22 (root -> ROOT sblock content .)
    ROOT            reduce using rule 22 (root -> ROOT sblock content .)
    BINOP           reduce using rule 22 (root -> ROOT sblock content .)
    KBINOP          reduce using rule 22 (root -> ROOT sblock content .)
    BINREL          reduce using rule 22 (root -> ROOT sblock content .)
    KBINREL         reduce using rule 22 (root -> ROOT sblock content .)
    NOT             reduce using rule 22 (root -> ROOT sblock content .)
    $end            reduce using rule 22 (root -> ROOT sblock content .)
    ENDBLOCK        reduce using rule 22 (root -> ROOT sblock content .)
    ENDSBLOCK       reduce using rule 22 (root -> ROOT sblock content .)

  ! SUP             [ shift and go to state 25 ]
  ! SUB             [ shift and go to state 24 ]


state 37

    (20) frac -> FRAC content content .
    (18) scripted -> content . SUP content
    (19) scripted -> content . SUB content

    SUP             reduce using rule 20 (frac -> FRAC content content .)
    SUB             reduce using rule 20 (frac -> FRAC content content .)
    CHAR            reduce using rule 20 (frac -> FRAC content content .)
    BEGINBLOCK      reduce using rule 20 (frac -> FRAC content content .)
    ORD             reduce using rule 20 (frac -> FRAC content content .)
    FRAC            reduce using rule 20 (frac -> FRAC content content .)
    ROOT            reduce using rule 20 (frac -> FRAC content content .)
    BINOP           reduce using rule 20 (frac -> FRAC content content .)
    KBINOP          reduce using rule 20 (frac -> FRAC content content .)
    BINREL          reduce using rule 20 (frac -> FRAC content content .)
    KBINREL         reduce using rule 20 (frac -> FRAC content content .)
    NOT             reduce using rule 20 (frac -> FRAC content content .)
    $end            reduce using rule 20 (frac -> FRAC content content .)
    ENDSBLOCK       reduce using rule 20 (frac -> FRAC content content .)
    ENDBLOCK        reduce using rule 20 (frac -> FRAC content content .)

  ! SUP             [ shift and go to state 25 ]
  ! SUB             [ shift and go to state 24 ]


state 38

    (3) sblock -> BEGINSBLOCK content ENDSBLOCK .

    CHAR            reduce using rule 3 (sblock -> BEGINSBLOCK content ENDSBLOCK .)
    BEGINBLOCK      reduce using rule 3 (sblock -> BEGINSBLOCK content ENDSBLOCK .)
    ORD             reduce using rule 3 (sblock -> BEGINSBLOCK content ENDSBLOCK .)
    FRAC            reduce using rule 3 (sblock -> BEGINSBLOCK content ENDSBLOCK .)
    ROOT            reduce using rule 3 (sblock -> BEGINSBLOCK content ENDSBLOCK .)
    BINOP           reduce using rule 3 (sblock -> BEGINSBLOCK content ENDSBLOCK .)
    KBINOP          reduce using rule 3 (sblock -> BEGINSBLOCK content ENDSBLOCK .)
    BINREL          reduce using rule 3 (sblock -> BEGINSBLOCK content ENDSBLOCK .)
    KBINREL         reduce using rule 3 (sblock -> BEGINSBLOCK content ENDSBLOCK .)
    NOT             reduce using rule 3 (sblock -> BEGINSBLOCK content ENDSBLOCK .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CHAR in state 12 resolved as shift
WARNING: shift/reduce conflict for ORD in state 12 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 31 resolved as shift
WARNING: shift/reduce conflict for ORD in state 31 resolved as shift
