Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> content
Rule 2     start -> start content
Rule 3     sblock -> BEGINSBLOCK content ENDSBLOCK
Rule 4     block -> BEGINBLOCK content ENDBLOCK
Rule 5     content -> chars
Rule 6     content -> block
Rule 7     content -> scripted
Rule 8     content -> command
Rule 9     content -> content content
Rule 10    chars -> char
Rule 11    chars -> char chars
Rule 12    char -> CHAR
Rule 13    char -> ord
Rule 14    ord -> ORD
Rule 15    command -> frac
Rule 16    command -> root
Rule 17    command -> binop
Rule 18    command -> binrel
Rule 19    command -> not
Rule 20    command -> function
Rule 21    command -> larop
Rule 22    scripted -> char SUP char
Rule 23    scripted -> char SUP block
Rule 24    scripted -> block SUP char
Rule 25    scripted -> block SUP block
Rule 26    scripted -> char SUB char
Rule 27    scripted -> char SUB block
Rule 28    scripted -> block SUB char
Rule 29    scripted -> block SUB block
Rule 30    scripted -> char SUP char SUB char
Rule 31    scripted -> char SUP char SUB block
Rule 32    scripted -> char SUP block SUB char
Rule 33    scripted -> char SUP block SUB block
Rule 34    scripted -> block SUP char SUB char
Rule 35    scripted -> block SUP char SUB block
Rule 36    scripted -> block SUP block SUB char
Rule 37    scripted -> block SUP block SUB block
Rule 38    scripted -> char SUB char SUP char
Rule 39    scripted -> char SUB char SUP block
Rule 40    scripted -> char SUB block SUP char
Rule 41    scripted -> char SUB block SUP block
Rule 42    scripted -> block SUB char SUP char
Rule 43    scripted -> block SUB char SUP block
Rule 44    scripted -> block SUB block SUP char
Rule 45    scripted -> block SUB block SUP block
Rule 46    frac -> FRAC char char
Rule 47    frac -> FRAC char block
Rule 48    frac -> FRAC block char
Rule 49    frac -> FRAC block block
Rule 50    root -> ROOT char
Rule 51    root -> ROOT block
Rule 52    root -> ROOT sblock char
Rule 53    root -> ROOT sblock block
Rule 54    binop -> BINOP
Rule 55    binop -> KBINOP
Rule 56    binrel -> BINREL
Rule 57    binrel -> KBINREL
Rule 58    not -> NOT
Rule 59    function -> FUNC
Rule 60    larop -> LARGEOP SUB char SUP char
Rule 61    larop -> LARGEOP SUB char SUP block
Rule 62    larop -> LARGEOP SUB block SUP char
Rule 63    larop -> LARGEOP SUB block SUP block
Rule 64    larop -> LARGEOP SUP char SUB char
Rule 65    larop -> LARGEOP SUP char SUB block
Rule 66    larop -> LARGEOP SUP block SUB char
Rule 67    larop -> LARGEOP SUP block SUB block
Rule 68    larop -> LARGEOP
Rule 69    larop -> LARGEOP SUB char
Rule 70    larop -> LARGEOP SUB block

Terminals, with rules where they appear

BEGINBLOCK           : 4
BEGINSBLOCK          : 3
BINOP                : 54
BINREL               : 56
CHAR                 : 12
ENDBLOCK             : 4
ENDSBLOCK            : 3
FRAC                 : 46 47 48 49
FUNC                 : 59
KBINOP               : 55
KBINREL              : 57
LARGEOP              : 60 61 62 63 64 65 66 67 68 69 70
NOT                  : 58
ORD                  : 14
ROOT                 : 50 51 52 53
SUB                  : 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 60 61 62 63 64 65 66 67 69 70
SUP                  : 22 23 24 25 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 60 61 62 63 64 65 66 67
error                : 

Nonterminals, with rules where they appear

binop                : 17
binrel               : 18
block                : 6 23 24 25 25 27 28 29 29 31 32 33 33 34 35 35 36 36 37 37 37 39 40 41 41 42 43 43 44 44 45 45 45 47 48 49 49 51 53 61 62 63 63 65 66 67 67 70
char                 : 10 11 22 22 23 24 26 26 27 28 30 30 30 31 31 32 32 33 34 34 35 36 38 38 38 39 39 40 40 41 42 42 43 44 46 46 47 48 50 52 60 60 61 62 64 64 65 66 69
chars                : 5 11
command              : 8
content              : 1 2 3 4 9 9
frac                 : 15
function             : 20
larop                : 21
not                  : 19
ord                  : 13
root                 : 16
sblock               : 52 53
scripted             : 7
start                : 2 0

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . content
    (2) start -> . start content
    (5) content -> . chars
    (6) content -> . block
    (7) content -> . scripted
    (8) content -> . command
    (9) content -> . content content
    (10) chars -> . char
    (11) chars -> . char chars
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (22) scripted -> . char SUP char
    (23) scripted -> . char SUP block
    (24) scripted -> . block SUP char
    (25) scripted -> . block SUP block
    (26) scripted -> . char SUB char
    (27) scripted -> . char SUB block
    (28) scripted -> . block SUB char
    (29) scripted -> . block SUB block
    (30) scripted -> . char SUP char SUB char
    (31) scripted -> . char SUP char SUB block
    (32) scripted -> . char SUP block SUB char
    (33) scripted -> . char SUP block SUB block
    (34) scripted -> . block SUP char SUB char
    (35) scripted -> . block SUP char SUB block
    (36) scripted -> . block SUP block SUB char
    (37) scripted -> . block SUP block SUB block
    (38) scripted -> . char SUB char SUP char
    (39) scripted -> . char SUB char SUP block
    (40) scripted -> . char SUB block SUP char
    (41) scripted -> . char SUB block SUP block
    (42) scripted -> . block SUB char SUP char
    (43) scripted -> . block SUB char SUP block
    (44) scripted -> . block SUB block SUP char
    (45) scripted -> . block SUB block SUP block
    (15) command -> . frac
    (16) command -> . root
    (17) command -> . binop
    (18) command -> . binrel
    (19) command -> . not
    (20) command -> . function
    (21) command -> . larop
    (12) char -> . CHAR
    (13) char -> . ord
    (46) frac -> . FRAC char char
    (47) frac -> . FRAC char block
    (48) frac -> . FRAC block char
    (49) frac -> . FRAC block block
    (50) root -> . ROOT char
    (51) root -> . ROOT block
    (52) root -> . ROOT sblock char
    (53) root -> . ROOT sblock block
    (54) binop -> . BINOP
    (55) binop -> . KBINOP
    (56) binrel -> . BINREL
    (57) binrel -> . KBINREL
    (58) not -> . NOT
    (59) function -> . FUNC
    (60) larop -> . LARGEOP SUB char SUP char
    (61) larop -> . LARGEOP SUB char SUP block
    (62) larop -> . LARGEOP SUB block SUP char
    (63) larop -> . LARGEOP SUB block SUP block
    (64) larop -> . LARGEOP SUP char SUB char
    (65) larop -> . LARGEOP SUP char SUB block
    (66) larop -> . LARGEOP SUP block SUB char
    (67) larop -> . LARGEOP SUP block SUB block
    (68) larop -> . LARGEOP
    (69) larop -> . LARGEOP SUB char
    (70) larop -> . LARGEOP SUB block
    (14) ord -> . ORD

    BEGINBLOCK      shift and go to state 4
    CHAR            shift and go to state 20
    FRAC            shift and go to state 11
    ROOT            shift and go to state 8
    BINOP           shift and go to state 21
    KBINOP          shift and go to state 17
    BINREL          shift and go to state 12
    KBINREL         shift and go to state 22
    NOT             shift and go to state 25
    FUNC            shift and go to state 15
    LARGEOP         shift and go to state 5
    ORD             shift and go to state 26

    function                       shift and go to state 10
    char                           shift and go to state 1
    frac                           shift and go to state 3
    binop                          shift and go to state 13
    chars                          shift and go to state 14
    content                        shift and go to state 6
    start                          shift and go to state 7
    command                        shift and go to state 23
    block                          shift and go to state 24
    binrel                         shift and go to state 2
    not                            shift and go to state 16
    ord                            shift and go to state 18
    root                           shift and go to state 27
    larop                          shift and go to state 19
    scripted                       shift and go to state 9

state 1

    (10) chars -> char .
    (11) chars -> char . chars
    (22) scripted -> char . SUP char
    (23) scripted -> char . SUP block
    (26) scripted -> char . SUB char
    (27) scripted -> char . SUB block
    (30) scripted -> char . SUP char SUB char
    (31) scripted -> char . SUP char SUB block
    (32) scripted -> char . SUP block SUB char
    (33) scripted -> char . SUP block SUB block
    (38) scripted -> char . SUB char SUP char
    (39) scripted -> char . SUB char SUP block
    (40) scripted -> char . SUB block SUP char
    (41) scripted -> char . SUB block SUP block
    (10) chars -> . char
    (11) chars -> . char chars
    (12) char -> . CHAR
    (13) char -> . ord
    (14) ord -> . ORD

  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for ORD resolved as shift
    ENDSBLOCK       reduce using rule 10 (chars -> char .)
    BEGINBLOCK      reduce using rule 10 (chars -> char .)
    FRAC            reduce using rule 10 (chars -> char .)
    ROOT            reduce using rule 10 (chars -> char .)
    BINOP           reduce using rule 10 (chars -> char .)
    KBINOP          reduce using rule 10 (chars -> char .)
    BINREL          reduce using rule 10 (chars -> char .)
    KBINREL         reduce using rule 10 (chars -> char .)
    NOT             reduce using rule 10 (chars -> char .)
    FUNC            reduce using rule 10 (chars -> char .)
    LARGEOP         reduce using rule 10 (chars -> char .)
    $end            reduce using rule 10 (chars -> char .)
    ENDBLOCK        reduce using rule 10 (chars -> char .)
    SUP             shift and go to state 31
    SUB             shift and go to state 28
    CHAR            shift and go to state 20
    ORD             shift and go to state 26

  ! CHAR            [ reduce using rule 10 (chars -> char .) ]
  ! ORD             [ reduce using rule 10 (chars -> char .) ]

    char                           shift and go to state 30
    chars                          shift and go to state 29
    ord                            shift and go to state 18

state 2

    (18) command -> binrel .

    BEGINBLOCK      reduce using rule 18 (command -> binrel .)
    CHAR            reduce using rule 18 (command -> binrel .)
    FRAC            reduce using rule 18 (command -> binrel .)
    ROOT            reduce using rule 18 (command -> binrel .)
    BINOP           reduce using rule 18 (command -> binrel .)
    KBINOP          reduce using rule 18 (command -> binrel .)
    BINREL          reduce using rule 18 (command -> binrel .)
    KBINREL         reduce using rule 18 (command -> binrel .)
    NOT             reduce using rule 18 (command -> binrel .)
    FUNC            reduce using rule 18 (command -> binrel .)
    LARGEOP         reduce using rule 18 (command -> binrel .)
    ORD             reduce using rule 18 (command -> binrel .)
    $end            reduce using rule 18 (command -> binrel .)
    ENDBLOCK        reduce using rule 18 (command -> binrel .)
    ENDSBLOCK       reduce using rule 18 (command -> binrel .)


state 3

    (15) command -> frac .

    BEGINBLOCK      reduce using rule 15 (command -> frac .)
    CHAR            reduce using rule 15 (command -> frac .)
    FRAC            reduce using rule 15 (command -> frac .)
    ROOT            reduce using rule 15 (command -> frac .)
    BINOP           reduce using rule 15 (command -> frac .)
    KBINOP          reduce using rule 15 (command -> frac .)
    BINREL          reduce using rule 15 (command -> frac .)
    KBINREL         reduce using rule 15 (command -> frac .)
    NOT             reduce using rule 15 (command -> frac .)
    FUNC            reduce using rule 15 (command -> frac .)
    LARGEOP         reduce using rule 15 (command -> frac .)
    ORD             reduce using rule 15 (command -> frac .)
    $end            reduce using rule 15 (command -> frac .)
    ENDBLOCK        reduce using rule 15 (command -> frac .)
    ENDSBLOCK       reduce using rule 15 (command -> frac .)


state 4

    (4) block -> BEGINBLOCK . content ENDBLOCK
    (5) content -> . chars
    (6) content -> . block
    (7) content -> . scripted
    (8) content -> . command
    (9) content -> . content content
    (10) chars -> . char
    (11) chars -> . char chars
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (22) scripted -> . char SUP char
    (23) scripted -> . char SUP block
    (24) scripted -> . block SUP char
    (25) scripted -> . block SUP block
    (26) scripted -> . char SUB char
    (27) scripted -> . char SUB block
    (28) scripted -> . block SUB char
    (29) scripted -> . block SUB block
    (30) scripted -> . char SUP char SUB char
    (31) scripted -> . char SUP char SUB block
    (32) scripted -> . char SUP block SUB char
    (33) scripted -> . char SUP block SUB block
    (34) scripted -> . block SUP char SUB char
    (35) scripted -> . block SUP char SUB block
    (36) scripted -> . block SUP block SUB char
    (37) scripted -> . block SUP block SUB block
    (38) scripted -> . char SUB char SUP char
    (39) scripted -> . char SUB char SUP block
    (40) scripted -> . char SUB block SUP char
    (41) scripted -> . char SUB block SUP block
    (42) scripted -> . block SUB char SUP char
    (43) scripted -> . block SUB char SUP block
    (44) scripted -> . block SUB block SUP char
    (45) scripted -> . block SUB block SUP block
    (15) command -> . frac
    (16) command -> . root
    (17) command -> . binop
    (18) command -> . binrel
    (19) command -> . not
    (20) command -> . function
    (21) command -> . larop
    (12) char -> . CHAR
    (13) char -> . ord
    (46) frac -> . FRAC char char
    (47) frac -> . FRAC char block
    (48) frac -> . FRAC block char
    (49) frac -> . FRAC block block
    (50) root -> . ROOT char
    (51) root -> . ROOT block
    (52) root -> . ROOT sblock char
    (53) root -> . ROOT sblock block
    (54) binop -> . BINOP
    (55) binop -> . KBINOP
    (56) binrel -> . BINREL
    (57) binrel -> . KBINREL
    (58) not -> . NOT
    (59) function -> . FUNC
    (60) larop -> . LARGEOP SUB char SUP char
    (61) larop -> . LARGEOP SUB char SUP block
    (62) larop -> . LARGEOP SUB block SUP char
    (63) larop -> . LARGEOP SUB block SUP block
    (64) larop -> . LARGEOP SUP char SUB char
    (65) larop -> . LARGEOP SUP char SUB block
    (66) larop -> . LARGEOP SUP block SUB char
    (67) larop -> . LARGEOP SUP block SUB block
    (68) larop -> . LARGEOP
    (69) larop -> . LARGEOP SUB char
    (70) larop -> . LARGEOP SUB block
    (14) ord -> . ORD

    BEGINBLOCK      shift and go to state 4
    CHAR            shift and go to state 20
    FRAC            shift and go to state 11
    ROOT            shift and go to state 8
    BINOP           shift and go to state 21
    KBINOP          shift and go to state 17
    BINREL          shift and go to state 12
    KBINREL         shift and go to state 22
    NOT             shift and go to state 25
    FUNC            shift and go to state 15
    LARGEOP         shift and go to state 5
    ORD             shift and go to state 26

    function                       shift and go to state 10
    char                           shift and go to state 1
    frac                           shift and go to state 3
    binop                          shift and go to state 13
    chars                          shift and go to state 14
    content                        shift and go to state 32
    command                        shift and go to state 23
    block                          shift and go to state 24
    binrel                         shift and go to state 2
    not                            shift and go to state 16
    ord                            shift and go to state 18
    root                           shift and go to state 27
    larop                          shift and go to state 19
    scripted                       shift and go to state 9

state 5

    (60) larop -> LARGEOP . SUB char SUP char
    (61) larop -> LARGEOP . SUB char SUP block
    (62) larop -> LARGEOP . SUB block SUP char
    (63) larop -> LARGEOP . SUB block SUP block
    (64) larop -> LARGEOP . SUP char SUB char
    (65) larop -> LARGEOP . SUP char SUB block
    (66) larop -> LARGEOP . SUP block SUB char
    (67) larop -> LARGEOP . SUP block SUB block
    (68) larop -> LARGEOP .
    (69) larop -> LARGEOP . SUB char
    (70) larop -> LARGEOP . SUB block

    SUB             shift and go to state 34
    SUP             shift and go to state 33
    BEGINBLOCK      reduce using rule 68 (larop -> LARGEOP .)
    CHAR            reduce using rule 68 (larop -> LARGEOP .)
    FRAC            reduce using rule 68 (larop -> LARGEOP .)
    ROOT            reduce using rule 68 (larop -> LARGEOP .)
    BINOP           reduce using rule 68 (larop -> LARGEOP .)
    KBINOP          reduce using rule 68 (larop -> LARGEOP .)
    BINREL          reduce using rule 68 (larop -> LARGEOP .)
    KBINREL         reduce using rule 68 (larop -> LARGEOP .)
    NOT             reduce using rule 68 (larop -> LARGEOP .)
    FUNC            reduce using rule 68 (larop -> LARGEOP .)
    LARGEOP         reduce using rule 68 (larop -> LARGEOP .)
    ORD             reduce using rule 68 (larop -> LARGEOP .)
    ENDBLOCK        reduce using rule 68 (larop -> LARGEOP .)
    $end            reduce using rule 68 (larop -> LARGEOP .)
    ENDSBLOCK       reduce using rule 68 (larop -> LARGEOP .)


state 6

    (1) start -> content .
    (9) content -> content . content
    (5) content -> . chars
    (6) content -> . block
    (7) content -> . scripted
    (8) content -> . command
    (9) content -> . content content
    (10) chars -> . char
    (11) chars -> . char chars
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (22) scripted -> . char SUP char
    (23) scripted -> . char SUP block
    (24) scripted -> . block SUP char
    (25) scripted -> . block SUP block
    (26) scripted -> . char SUB char
    (27) scripted -> . char SUB block
    (28) scripted -> . block SUB char
    (29) scripted -> . block SUB block
    (30) scripted -> . char SUP char SUB char
    (31) scripted -> . char SUP char SUB block
    (32) scripted -> . char SUP block SUB char
    (33) scripted -> . char SUP block SUB block
    (34) scripted -> . block SUP char SUB char
    (35) scripted -> . block SUP char SUB block
    (36) scripted -> . block SUP block SUB char
    (37) scripted -> . block SUP block SUB block
    (38) scripted -> . char SUB char SUP char
    (39) scripted -> . char SUB char SUP block
    (40) scripted -> . char SUB block SUP char
    (41) scripted -> . char SUB block SUP block
    (42) scripted -> . block SUB char SUP char
    (43) scripted -> . block SUB char SUP block
    (44) scripted -> . block SUB block SUP char
    (45) scripted -> . block SUB block SUP block
    (15) command -> . frac
    (16) command -> . root
    (17) command -> . binop
    (18) command -> . binrel
    (19) command -> . not
    (20) command -> . function
    (21) command -> . larop
    (12) char -> . CHAR
    (13) char -> . ord
    (46) frac -> . FRAC char char
    (47) frac -> . FRAC char block
    (48) frac -> . FRAC block char
    (49) frac -> . FRAC block block
    (50) root -> . ROOT char
    (51) root -> . ROOT block
    (52) root -> . ROOT sblock char
    (53) root -> . ROOT sblock block
    (54) binop -> . BINOP
    (55) binop -> . KBINOP
    (56) binrel -> . BINREL
    (57) binrel -> . KBINREL
    (58) not -> . NOT
    (59) function -> . FUNC
    (60) larop -> . LARGEOP SUB char SUP char
    (61) larop -> . LARGEOP SUB char SUP block
    (62) larop -> . LARGEOP SUB block SUP char
    (63) larop -> . LARGEOP SUB block SUP block
    (64) larop -> . LARGEOP SUP char SUB char
    (65) larop -> . LARGEOP SUP char SUB block
    (66) larop -> . LARGEOP SUP block SUB char
    (67) larop -> . LARGEOP SUP block SUB block
    (68) larop -> . LARGEOP
    (69) larop -> . LARGEOP SUB char
    (70) larop -> . LARGEOP SUB block
    (14) ord -> . ORD

  ! shift/reduce conflict for BEGINBLOCK resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FRAC resolved as shift
  ! shift/reduce conflict for ROOT resolved as shift
  ! shift/reduce conflict for BINOP resolved as shift
  ! shift/reduce conflict for KBINOP resolved as shift
  ! shift/reduce conflict for BINREL resolved as shift
  ! shift/reduce conflict for KBINREL resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for LARGEOP resolved as shift
  ! shift/reduce conflict for ORD resolved as shift
    $end            reduce using rule 1 (start -> content .)
    BEGINBLOCK      shift and go to state 4
    CHAR            shift and go to state 20
    FRAC            shift and go to state 11
    ROOT            shift and go to state 8
    BINOP           shift and go to state 21
    KBINOP          shift and go to state 17
    BINREL          shift and go to state 12
    KBINREL         shift and go to state 22
    NOT             shift and go to state 25
    FUNC            shift and go to state 15
    LARGEOP         shift and go to state 5
    ORD             shift and go to state 26

  ! BEGINBLOCK      [ reduce using rule 1 (start -> content .) ]
  ! CHAR            [ reduce using rule 1 (start -> content .) ]
  ! FRAC            [ reduce using rule 1 (start -> content .) ]
  ! ROOT            [ reduce using rule 1 (start -> content .) ]
  ! BINOP           [ reduce using rule 1 (start -> content .) ]
  ! KBINOP          [ reduce using rule 1 (start -> content .) ]
  ! BINREL          [ reduce using rule 1 (start -> content .) ]
  ! KBINREL         [ reduce using rule 1 (start -> content .) ]
  ! NOT             [ reduce using rule 1 (start -> content .) ]
  ! FUNC            [ reduce using rule 1 (start -> content .) ]
  ! LARGEOP         [ reduce using rule 1 (start -> content .) ]
  ! ORD             [ reduce using rule 1 (start -> content .) ]

    function                       shift and go to state 10
    char                           shift and go to state 1
    frac                           shift and go to state 3
    binop                          shift and go to state 13
    chars                          shift and go to state 14
    content                        shift and go to state 35
    command                        shift and go to state 23
    block                          shift and go to state 24
    binrel                         shift and go to state 2
    not                            shift and go to state 16
    ord                            shift and go to state 18
    root                           shift and go to state 27
    larop                          shift and go to state 19
    scripted                       shift and go to state 9

state 7

    (0) S' -> start .
    (2) start -> start . content
    (5) content -> . chars
    (6) content -> . block
    (7) content -> . scripted
    (8) content -> . command
    (9) content -> . content content
    (10) chars -> . char
    (11) chars -> . char chars
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (22) scripted -> . char SUP char
    (23) scripted -> . char SUP block
    (24) scripted -> . block SUP char
    (25) scripted -> . block SUP block
    (26) scripted -> . char SUB char
    (27) scripted -> . char SUB block
    (28) scripted -> . block SUB char
    (29) scripted -> . block SUB block
    (30) scripted -> . char SUP char SUB char
    (31) scripted -> . char SUP char SUB block
    (32) scripted -> . char SUP block SUB char
    (33) scripted -> . char SUP block SUB block
    (34) scripted -> . block SUP char SUB char
    (35) scripted -> . block SUP char SUB block
    (36) scripted -> . block SUP block SUB char
    (37) scripted -> . block SUP block SUB block
    (38) scripted -> . char SUB char SUP char
    (39) scripted -> . char SUB char SUP block
    (40) scripted -> . char SUB block SUP char
    (41) scripted -> . char SUB block SUP block
    (42) scripted -> . block SUB char SUP char
    (43) scripted -> . block SUB char SUP block
    (44) scripted -> . block SUB block SUP char
    (45) scripted -> . block SUB block SUP block
    (15) command -> . frac
    (16) command -> . root
    (17) command -> . binop
    (18) command -> . binrel
    (19) command -> . not
    (20) command -> . function
    (21) command -> . larop
    (12) char -> . CHAR
    (13) char -> . ord
    (46) frac -> . FRAC char char
    (47) frac -> . FRAC char block
    (48) frac -> . FRAC block char
    (49) frac -> . FRAC block block
    (50) root -> . ROOT char
    (51) root -> . ROOT block
    (52) root -> . ROOT sblock char
    (53) root -> . ROOT sblock block
    (54) binop -> . BINOP
    (55) binop -> . KBINOP
    (56) binrel -> . BINREL
    (57) binrel -> . KBINREL
    (58) not -> . NOT
    (59) function -> . FUNC
    (60) larop -> . LARGEOP SUB char SUP char
    (61) larop -> . LARGEOP SUB char SUP block
    (62) larop -> . LARGEOP SUB block SUP char
    (63) larop -> . LARGEOP SUB block SUP block
    (64) larop -> . LARGEOP SUP char SUB char
    (65) larop -> . LARGEOP SUP char SUB block
    (66) larop -> . LARGEOP SUP block SUB char
    (67) larop -> . LARGEOP SUP block SUB block
    (68) larop -> . LARGEOP
    (69) larop -> . LARGEOP SUB char
    (70) larop -> . LARGEOP SUB block
    (14) ord -> . ORD

    BEGINBLOCK      shift and go to state 4
    CHAR            shift and go to state 20
    FRAC            shift and go to state 11
    ROOT            shift and go to state 8
    BINOP           shift and go to state 21
    KBINOP          shift and go to state 17
    BINREL          shift and go to state 12
    KBINREL         shift and go to state 22
    NOT             shift and go to state 25
    FUNC            shift and go to state 15
    LARGEOP         shift and go to state 5
    ORD             shift and go to state 26

    function                       shift and go to state 10
    char                           shift and go to state 1
    frac                           shift and go to state 3
    binop                          shift and go to state 13
    chars                          shift and go to state 14
    content                        shift and go to state 36
    command                        shift and go to state 23
    block                          shift and go to state 24
    binrel                         shift and go to state 2
    not                            shift and go to state 16
    ord                            shift and go to state 18
    root                           shift and go to state 27
    larop                          shift and go to state 19
    scripted                       shift and go to state 9

state 8

    (50) root -> ROOT . char
    (51) root -> ROOT . block
    (52) root -> ROOT . sblock char
    (53) root -> ROOT . sblock block
    (12) char -> . CHAR
    (13) char -> . ord
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (3) sblock -> . BEGINSBLOCK content ENDSBLOCK
    (14) ord -> . ORD

    CHAR            shift and go to state 20
    BEGINBLOCK      shift and go to state 4
    BEGINSBLOCK     shift and go to state 39
    ORD             shift and go to state 26

    char                           shift and go to state 38
    ord                            shift and go to state 18
    sblock                         shift and go to state 37
    block                          shift and go to state 40

state 9

    (7) content -> scripted .

    BEGINBLOCK      reduce using rule 7 (content -> scripted .)
    CHAR            reduce using rule 7 (content -> scripted .)
    FRAC            reduce using rule 7 (content -> scripted .)
    ROOT            reduce using rule 7 (content -> scripted .)
    BINOP           reduce using rule 7 (content -> scripted .)
    KBINOP          reduce using rule 7 (content -> scripted .)
    BINREL          reduce using rule 7 (content -> scripted .)
    KBINREL         reduce using rule 7 (content -> scripted .)
    NOT             reduce using rule 7 (content -> scripted .)
    FUNC            reduce using rule 7 (content -> scripted .)
    LARGEOP         reduce using rule 7 (content -> scripted .)
    ORD             reduce using rule 7 (content -> scripted .)
    $end            reduce using rule 7 (content -> scripted .)
    ENDBLOCK        reduce using rule 7 (content -> scripted .)
    ENDSBLOCK       reduce using rule 7 (content -> scripted .)


state 10

    (20) command -> function .

    BEGINBLOCK      reduce using rule 20 (command -> function .)
    CHAR            reduce using rule 20 (command -> function .)
    FRAC            reduce using rule 20 (command -> function .)
    ROOT            reduce using rule 20 (command -> function .)
    BINOP           reduce using rule 20 (command -> function .)
    KBINOP          reduce using rule 20 (command -> function .)
    BINREL          reduce using rule 20 (command -> function .)
    KBINREL         reduce using rule 20 (command -> function .)
    NOT             reduce using rule 20 (command -> function .)
    FUNC            reduce using rule 20 (command -> function .)
    LARGEOP         reduce using rule 20 (command -> function .)
    ORD             reduce using rule 20 (command -> function .)
    $end            reduce using rule 20 (command -> function .)
    ENDBLOCK        reduce using rule 20 (command -> function .)
    ENDSBLOCK       reduce using rule 20 (command -> function .)


state 11

    (46) frac -> FRAC . char char
    (47) frac -> FRAC . char block
    (48) frac -> FRAC . block char
    (49) frac -> FRAC . block block
    (12) char -> . CHAR
    (13) char -> . ord
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (14) ord -> . ORD

    CHAR            shift and go to state 20
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 26

    char                           shift and go to state 41
    ord                            shift and go to state 18
    block                          shift and go to state 42

state 12

    (56) binrel -> BINREL .

    ENDBLOCK        reduce using rule 56 (binrel -> BINREL .)
    BEGINBLOCK      reduce using rule 56 (binrel -> BINREL .)
    CHAR            reduce using rule 56 (binrel -> BINREL .)
    FRAC            reduce using rule 56 (binrel -> BINREL .)
    ROOT            reduce using rule 56 (binrel -> BINREL .)
    BINOP           reduce using rule 56 (binrel -> BINREL .)
    KBINOP          reduce using rule 56 (binrel -> BINREL .)
    BINREL          reduce using rule 56 (binrel -> BINREL .)
    KBINREL         reduce using rule 56 (binrel -> BINREL .)
    NOT             reduce using rule 56 (binrel -> BINREL .)
    FUNC            reduce using rule 56 (binrel -> BINREL .)
    LARGEOP         reduce using rule 56 (binrel -> BINREL .)
    ORD             reduce using rule 56 (binrel -> BINREL .)
    $end            reduce using rule 56 (binrel -> BINREL .)
    ENDSBLOCK       reduce using rule 56 (binrel -> BINREL .)


state 13

    (17) command -> binop .

    BEGINBLOCK      reduce using rule 17 (command -> binop .)
    CHAR            reduce using rule 17 (command -> binop .)
    FRAC            reduce using rule 17 (command -> binop .)
    ROOT            reduce using rule 17 (command -> binop .)
    BINOP           reduce using rule 17 (command -> binop .)
    KBINOP          reduce using rule 17 (command -> binop .)
    BINREL          reduce using rule 17 (command -> binop .)
    KBINREL         reduce using rule 17 (command -> binop .)
    NOT             reduce using rule 17 (command -> binop .)
    FUNC            reduce using rule 17 (command -> binop .)
    LARGEOP         reduce using rule 17 (command -> binop .)
    ORD             reduce using rule 17 (command -> binop .)
    $end            reduce using rule 17 (command -> binop .)
    ENDBLOCK        reduce using rule 17 (command -> binop .)
    ENDSBLOCK       reduce using rule 17 (command -> binop .)


state 14

    (5) content -> chars .

    BEGINBLOCK      reduce using rule 5 (content -> chars .)
    CHAR            reduce using rule 5 (content -> chars .)
    FRAC            reduce using rule 5 (content -> chars .)
    ROOT            reduce using rule 5 (content -> chars .)
    BINOP           reduce using rule 5 (content -> chars .)
    KBINOP          reduce using rule 5 (content -> chars .)
    BINREL          reduce using rule 5 (content -> chars .)
    KBINREL         reduce using rule 5 (content -> chars .)
    NOT             reduce using rule 5 (content -> chars .)
    FUNC            reduce using rule 5 (content -> chars .)
    LARGEOP         reduce using rule 5 (content -> chars .)
    ORD             reduce using rule 5 (content -> chars .)
    $end            reduce using rule 5 (content -> chars .)
    ENDBLOCK        reduce using rule 5 (content -> chars .)
    ENDSBLOCK       reduce using rule 5 (content -> chars .)


state 15

    (59) function -> FUNC .

    BEGINBLOCK      reduce using rule 59 (function -> FUNC .)
    CHAR            reduce using rule 59 (function -> FUNC .)
    FRAC            reduce using rule 59 (function -> FUNC .)
    ROOT            reduce using rule 59 (function -> FUNC .)
    BINOP           reduce using rule 59 (function -> FUNC .)
    KBINOP          reduce using rule 59 (function -> FUNC .)
    BINREL          reduce using rule 59 (function -> FUNC .)
    KBINREL         reduce using rule 59 (function -> FUNC .)
    NOT             reduce using rule 59 (function -> FUNC .)
    FUNC            reduce using rule 59 (function -> FUNC .)
    LARGEOP         reduce using rule 59 (function -> FUNC .)
    ORD             reduce using rule 59 (function -> FUNC .)
    $end            reduce using rule 59 (function -> FUNC .)
    ENDSBLOCK       reduce using rule 59 (function -> FUNC .)
    ENDBLOCK        reduce using rule 59 (function -> FUNC .)


state 16

    (19) command -> not .

    BEGINBLOCK      reduce using rule 19 (command -> not .)
    CHAR            reduce using rule 19 (command -> not .)
    FRAC            reduce using rule 19 (command -> not .)
    ROOT            reduce using rule 19 (command -> not .)
    BINOP           reduce using rule 19 (command -> not .)
    KBINOP          reduce using rule 19 (command -> not .)
    BINREL          reduce using rule 19 (command -> not .)
    KBINREL         reduce using rule 19 (command -> not .)
    NOT             reduce using rule 19 (command -> not .)
    FUNC            reduce using rule 19 (command -> not .)
    LARGEOP         reduce using rule 19 (command -> not .)
    ORD             reduce using rule 19 (command -> not .)
    $end            reduce using rule 19 (command -> not .)
    ENDBLOCK        reduce using rule 19 (command -> not .)
    ENDSBLOCK       reduce using rule 19 (command -> not .)


state 17

    (55) binop -> KBINOP .

    ENDSBLOCK       reduce using rule 55 (binop -> KBINOP .)
    BEGINBLOCK      reduce using rule 55 (binop -> KBINOP .)
    CHAR            reduce using rule 55 (binop -> KBINOP .)
    FRAC            reduce using rule 55 (binop -> KBINOP .)
    ROOT            reduce using rule 55 (binop -> KBINOP .)
    BINOP           reduce using rule 55 (binop -> KBINOP .)
    KBINOP          reduce using rule 55 (binop -> KBINOP .)
    BINREL          reduce using rule 55 (binop -> KBINOP .)
    KBINREL         reduce using rule 55 (binop -> KBINOP .)
    NOT             reduce using rule 55 (binop -> KBINOP .)
    FUNC            reduce using rule 55 (binop -> KBINOP .)
    LARGEOP         reduce using rule 55 (binop -> KBINOP .)
    ORD             reduce using rule 55 (binop -> KBINOP .)
    $end            reduce using rule 55 (binop -> KBINOP .)
    ENDBLOCK        reduce using rule 55 (binop -> KBINOP .)


state 18

    (13) char -> ord .

    CHAR            reduce using rule 13 (char -> ord .)
    BEGINBLOCK      reduce using rule 13 (char -> ord .)
    ORD             reduce using rule 13 (char -> ord .)
    FRAC            reduce using rule 13 (char -> ord .)
    ROOT            reduce using rule 13 (char -> ord .)
    BINOP           reduce using rule 13 (char -> ord .)
    KBINOP          reduce using rule 13 (char -> ord .)
    BINREL          reduce using rule 13 (char -> ord .)
    KBINREL         reduce using rule 13 (char -> ord .)
    NOT             reduce using rule 13 (char -> ord .)
    FUNC            reduce using rule 13 (char -> ord .)
    LARGEOP         reduce using rule 13 (char -> ord .)
    $end            reduce using rule 13 (char -> ord .)
    ENDBLOCK        reduce using rule 13 (char -> ord .)
    ENDSBLOCK       reduce using rule 13 (char -> ord .)
    SUP             reduce using rule 13 (char -> ord .)
    SUB             reduce using rule 13 (char -> ord .)


state 19

    (21) command -> larop .

    BEGINBLOCK      reduce using rule 21 (command -> larop .)
    CHAR            reduce using rule 21 (command -> larop .)
    FRAC            reduce using rule 21 (command -> larop .)
    ROOT            reduce using rule 21 (command -> larop .)
    BINOP           reduce using rule 21 (command -> larop .)
    KBINOP          reduce using rule 21 (command -> larop .)
    BINREL          reduce using rule 21 (command -> larop .)
    KBINREL         reduce using rule 21 (command -> larop .)
    NOT             reduce using rule 21 (command -> larop .)
    FUNC            reduce using rule 21 (command -> larop .)
    LARGEOP         reduce using rule 21 (command -> larop .)
    ORD             reduce using rule 21 (command -> larop .)
    $end            reduce using rule 21 (command -> larop .)
    ENDBLOCK        reduce using rule 21 (command -> larop .)
    ENDSBLOCK       reduce using rule 21 (command -> larop .)


state 20

    (12) char -> CHAR .

    CHAR            reduce using rule 12 (char -> CHAR .)
    BEGINBLOCK      reduce using rule 12 (char -> CHAR .)
    ORD             reduce using rule 12 (char -> CHAR .)
    FRAC            reduce using rule 12 (char -> CHAR .)
    ROOT            reduce using rule 12 (char -> CHAR .)
    BINOP           reduce using rule 12 (char -> CHAR .)
    KBINOP          reduce using rule 12 (char -> CHAR .)
    BINREL          reduce using rule 12 (char -> CHAR .)
    KBINREL         reduce using rule 12 (char -> CHAR .)
    NOT             reduce using rule 12 (char -> CHAR .)
    FUNC            reduce using rule 12 (char -> CHAR .)
    LARGEOP         reduce using rule 12 (char -> CHAR .)
    $end            reduce using rule 12 (char -> CHAR .)
    ENDBLOCK        reduce using rule 12 (char -> CHAR .)
    ENDSBLOCK       reduce using rule 12 (char -> CHAR .)
    SUP             reduce using rule 12 (char -> CHAR .)
    SUB             reduce using rule 12 (char -> CHAR .)


state 21

    (54) binop -> BINOP .

    ENDSBLOCK       reduce using rule 54 (binop -> BINOP .)
    BEGINBLOCK      reduce using rule 54 (binop -> BINOP .)
    CHAR            reduce using rule 54 (binop -> BINOP .)
    FRAC            reduce using rule 54 (binop -> BINOP .)
    ROOT            reduce using rule 54 (binop -> BINOP .)
    BINOP           reduce using rule 54 (binop -> BINOP .)
    KBINOP          reduce using rule 54 (binop -> BINOP .)
    BINREL          reduce using rule 54 (binop -> BINOP .)
    KBINREL         reduce using rule 54 (binop -> BINOP .)
    NOT             reduce using rule 54 (binop -> BINOP .)
    FUNC            reduce using rule 54 (binop -> BINOP .)
    LARGEOP         reduce using rule 54 (binop -> BINOP .)
    ORD             reduce using rule 54 (binop -> BINOP .)
    $end            reduce using rule 54 (binop -> BINOP .)
    ENDBLOCK        reduce using rule 54 (binop -> BINOP .)


state 22

    (57) binrel -> KBINREL .

    ENDBLOCK        reduce using rule 57 (binrel -> KBINREL .)
    BEGINBLOCK      reduce using rule 57 (binrel -> KBINREL .)
    CHAR            reduce using rule 57 (binrel -> KBINREL .)
    FRAC            reduce using rule 57 (binrel -> KBINREL .)
    ROOT            reduce using rule 57 (binrel -> KBINREL .)
    BINOP           reduce using rule 57 (binrel -> KBINREL .)
    KBINOP          reduce using rule 57 (binrel -> KBINREL .)
    BINREL          reduce using rule 57 (binrel -> KBINREL .)
    KBINREL         reduce using rule 57 (binrel -> KBINREL .)
    NOT             reduce using rule 57 (binrel -> KBINREL .)
    FUNC            reduce using rule 57 (binrel -> KBINREL .)
    LARGEOP         reduce using rule 57 (binrel -> KBINREL .)
    ORD             reduce using rule 57 (binrel -> KBINREL .)
    $end            reduce using rule 57 (binrel -> KBINREL .)
    ENDSBLOCK       reduce using rule 57 (binrel -> KBINREL .)


state 23

    (8) content -> command .

    BEGINBLOCK      reduce using rule 8 (content -> command .)
    CHAR            reduce using rule 8 (content -> command .)
    FRAC            reduce using rule 8 (content -> command .)
    ROOT            reduce using rule 8 (content -> command .)
    BINOP           reduce using rule 8 (content -> command .)
    KBINOP          reduce using rule 8 (content -> command .)
    BINREL          reduce using rule 8 (content -> command .)
    KBINREL         reduce using rule 8 (content -> command .)
    NOT             reduce using rule 8 (content -> command .)
    FUNC            reduce using rule 8 (content -> command .)
    LARGEOP         reduce using rule 8 (content -> command .)
    ORD             reduce using rule 8 (content -> command .)
    $end            reduce using rule 8 (content -> command .)
    ENDBLOCK        reduce using rule 8 (content -> command .)
    ENDSBLOCK       reduce using rule 8 (content -> command .)


state 24

    (6) content -> block .
    (24) scripted -> block . SUP char
    (25) scripted -> block . SUP block
    (28) scripted -> block . SUB char
    (29) scripted -> block . SUB block
    (34) scripted -> block . SUP char SUB char
    (35) scripted -> block . SUP char SUB block
    (36) scripted -> block . SUP block SUB char
    (37) scripted -> block . SUP block SUB block
    (42) scripted -> block . SUB char SUP char
    (43) scripted -> block . SUB char SUP block
    (44) scripted -> block . SUB block SUP char
    (45) scripted -> block . SUB block SUP block

    BEGINBLOCK      reduce using rule 6 (content -> block .)
    CHAR            reduce using rule 6 (content -> block .)
    FRAC            reduce using rule 6 (content -> block .)
    ROOT            reduce using rule 6 (content -> block .)
    BINOP           reduce using rule 6 (content -> block .)
    KBINOP          reduce using rule 6 (content -> block .)
    BINREL          reduce using rule 6 (content -> block .)
    KBINREL         reduce using rule 6 (content -> block .)
    NOT             reduce using rule 6 (content -> block .)
    FUNC            reduce using rule 6 (content -> block .)
    LARGEOP         reduce using rule 6 (content -> block .)
    ORD             reduce using rule 6 (content -> block .)
    $end            reduce using rule 6 (content -> block .)
    ENDBLOCK        reduce using rule 6 (content -> block .)
    ENDSBLOCK       reduce using rule 6 (content -> block .)
    SUP             shift and go to state 44
    SUB             shift and go to state 43


state 25

    (58) not -> NOT .

    BEGINBLOCK      reduce using rule 58 (not -> NOT .)
    CHAR            reduce using rule 58 (not -> NOT .)
    FRAC            reduce using rule 58 (not -> NOT .)
    ROOT            reduce using rule 58 (not -> NOT .)
    BINOP           reduce using rule 58 (not -> NOT .)
    KBINOP          reduce using rule 58 (not -> NOT .)
    BINREL          reduce using rule 58 (not -> NOT .)
    KBINREL         reduce using rule 58 (not -> NOT .)
    NOT             reduce using rule 58 (not -> NOT .)
    FUNC            reduce using rule 58 (not -> NOT .)
    LARGEOP         reduce using rule 58 (not -> NOT .)
    ORD             reduce using rule 58 (not -> NOT .)
    $end            reduce using rule 58 (not -> NOT .)
    ENDSBLOCK       reduce using rule 58 (not -> NOT .)
    ENDBLOCK        reduce using rule 58 (not -> NOT .)


state 26

    (14) ord -> ORD .

    BEGINBLOCK      reduce using rule 14 (ord -> ORD .)
    CHAR            reduce using rule 14 (ord -> ORD .)
    FRAC            reduce using rule 14 (ord -> ORD .)
    ROOT            reduce using rule 14 (ord -> ORD .)
    BINOP           reduce using rule 14 (ord -> ORD .)
    KBINOP          reduce using rule 14 (ord -> ORD .)
    BINREL          reduce using rule 14 (ord -> ORD .)
    KBINREL         reduce using rule 14 (ord -> ORD .)
    NOT             reduce using rule 14 (ord -> ORD .)
    FUNC            reduce using rule 14 (ord -> ORD .)
    LARGEOP         reduce using rule 14 (ord -> ORD .)
    ORD             reduce using rule 14 (ord -> ORD .)
    $end            reduce using rule 14 (ord -> ORD .)
    ENDBLOCK        reduce using rule 14 (ord -> ORD .)
    ENDSBLOCK       reduce using rule 14 (ord -> ORD .)
    SUP             reduce using rule 14 (ord -> ORD .)
    SUB             reduce using rule 14 (ord -> ORD .)


state 27

    (16) command -> root .

    BEGINBLOCK      reduce using rule 16 (command -> root .)
    CHAR            reduce using rule 16 (command -> root .)
    FRAC            reduce using rule 16 (command -> root .)
    ROOT            reduce using rule 16 (command -> root .)
    BINOP           reduce using rule 16 (command -> root .)
    KBINOP          reduce using rule 16 (command -> root .)
    BINREL          reduce using rule 16 (command -> root .)
    KBINREL         reduce using rule 16 (command -> root .)
    NOT             reduce using rule 16 (command -> root .)
    FUNC            reduce using rule 16 (command -> root .)
    LARGEOP         reduce using rule 16 (command -> root .)
    ORD             reduce using rule 16 (command -> root .)
    $end            reduce using rule 16 (command -> root .)
    ENDBLOCK        reduce using rule 16 (command -> root .)
    ENDSBLOCK       reduce using rule 16 (command -> root .)


state 28

    (26) scripted -> char SUB . char
    (27) scripted -> char SUB . block
    (38) scripted -> char SUB . char SUP char
    (39) scripted -> char SUB . char SUP block
    (40) scripted -> char SUB . block SUP char
    (41) scripted -> char SUB . block SUP block
    (12) char -> . CHAR
    (13) char -> . ord
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (14) ord -> . ORD

    CHAR            shift and go to state 20
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 26

    char                           shift and go to state 45
    ord                            shift and go to state 18
    block                          shift and go to state 46

state 29

    (11) chars -> char chars .

    ENDSBLOCK       reduce using rule 11 (chars -> char chars .)
    BEGINBLOCK      reduce using rule 11 (chars -> char chars .)
    CHAR            reduce using rule 11 (chars -> char chars .)
    FRAC            reduce using rule 11 (chars -> char chars .)
    ROOT            reduce using rule 11 (chars -> char chars .)
    BINOP           reduce using rule 11 (chars -> char chars .)
    KBINOP          reduce using rule 11 (chars -> char chars .)
    BINREL          reduce using rule 11 (chars -> char chars .)
    KBINREL         reduce using rule 11 (chars -> char chars .)
    NOT             reduce using rule 11 (chars -> char chars .)
    FUNC            reduce using rule 11 (chars -> char chars .)
    LARGEOP         reduce using rule 11 (chars -> char chars .)
    ORD             reduce using rule 11 (chars -> char chars .)
    $end            reduce using rule 11 (chars -> char chars .)
    ENDBLOCK        reduce using rule 11 (chars -> char chars .)


state 30

    (10) chars -> char .
    (11) chars -> char . chars
    (10) chars -> . char
    (11) chars -> . char chars
    (12) char -> . CHAR
    (13) char -> . ord
    (14) ord -> . ORD

  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for ORD resolved as shift
    BEGINBLOCK      reduce using rule 10 (chars -> char .)
    FRAC            reduce using rule 10 (chars -> char .)
    ROOT            reduce using rule 10 (chars -> char .)
    BINOP           reduce using rule 10 (chars -> char .)
    KBINOP          reduce using rule 10 (chars -> char .)
    BINREL          reduce using rule 10 (chars -> char .)
    KBINREL         reduce using rule 10 (chars -> char .)
    NOT             reduce using rule 10 (chars -> char .)
    FUNC            reduce using rule 10 (chars -> char .)
    LARGEOP         reduce using rule 10 (chars -> char .)
    $end            reduce using rule 10 (chars -> char .)
    ENDBLOCK        reduce using rule 10 (chars -> char .)
    ENDSBLOCK       reduce using rule 10 (chars -> char .)
    CHAR            shift and go to state 20
    ORD             shift and go to state 26

  ! CHAR            [ reduce using rule 10 (chars -> char .) ]
  ! ORD             [ reduce using rule 10 (chars -> char .) ]

    char                           shift and go to state 30
    chars                          shift and go to state 29
    ord                            shift and go to state 18

state 31

    (22) scripted -> char SUP . char
    (23) scripted -> char SUP . block
    (30) scripted -> char SUP . char SUB char
    (31) scripted -> char SUP . char SUB block
    (32) scripted -> char SUP . block SUB char
    (33) scripted -> char SUP . block SUB block
    (12) char -> . CHAR
    (13) char -> . ord
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (14) ord -> . ORD

    CHAR            shift and go to state 20
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 26

    char                           shift and go to state 47
    ord                            shift and go to state 18
    block                          shift and go to state 48

state 32

    (4) block -> BEGINBLOCK content . ENDBLOCK
    (9) content -> content . content
    (5) content -> . chars
    (6) content -> . block
    (7) content -> . scripted
    (8) content -> . command
    (9) content -> . content content
    (10) chars -> . char
    (11) chars -> . char chars
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (22) scripted -> . char SUP char
    (23) scripted -> . char SUP block
    (24) scripted -> . block SUP char
    (25) scripted -> . block SUP block
    (26) scripted -> . char SUB char
    (27) scripted -> . char SUB block
    (28) scripted -> . block SUB char
    (29) scripted -> . block SUB block
    (30) scripted -> . char SUP char SUB char
    (31) scripted -> . char SUP char SUB block
    (32) scripted -> . char SUP block SUB char
    (33) scripted -> . char SUP block SUB block
    (34) scripted -> . block SUP char SUB char
    (35) scripted -> . block SUP char SUB block
    (36) scripted -> . block SUP block SUB char
    (37) scripted -> . block SUP block SUB block
    (38) scripted -> . char SUB char SUP char
    (39) scripted -> . char SUB char SUP block
    (40) scripted -> . char SUB block SUP char
    (41) scripted -> . char SUB block SUP block
    (42) scripted -> . block SUB char SUP char
    (43) scripted -> . block SUB char SUP block
    (44) scripted -> . block SUB block SUP char
    (45) scripted -> . block SUB block SUP block
    (15) command -> . frac
    (16) command -> . root
    (17) command -> . binop
    (18) command -> . binrel
    (19) command -> . not
    (20) command -> . function
    (21) command -> . larop
    (12) char -> . CHAR
    (13) char -> . ord
    (46) frac -> . FRAC char char
    (47) frac -> . FRAC char block
    (48) frac -> . FRAC block char
    (49) frac -> . FRAC block block
    (50) root -> . ROOT char
    (51) root -> . ROOT block
    (52) root -> . ROOT sblock char
    (53) root -> . ROOT sblock block
    (54) binop -> . BINOP
    (55) binop -> . KBINOP
    (56) binrel -> . BINREL
    (57) binrel -> . KBINREL
    (58) not -> . NOT
    (59) function -> . FUNC
    (60) larop -> . LARGEOP SUB char SUP char
    (61) larop -> . LARGEOP SUB char SUP block
    (62) larop -> . LARGEOP SUB block SUP char
    (63) larop -> . LARGEOP SUB block SUP block
    (64) larop -> . LARGEOP SUP char SUB char
    (65) larop -> . LARGEOP SUP char SUB block
    (66) larop -> . LARGEOP SUP block SUB char
    (67) larop -> . LARGEOP SUP block SUB block
    (68) larop -> . LARGEOP
    (69) larop -> . LARGEOP SUB char
    (70) larop -> . LARGEOP SUB block
    (14) ord -> . ORD

    ENDBLOCK        shift and go to state 49
    BEGINBLOCK      shift and go to state 4
    CHAR            shift and go to state 20
    FRAC            shift and go to state 11
    ROOT            shift and go to state 8
    BINOP           shift and go to state 21
    KBINOP          shift and go to state 17
    BINREL          shift and go to state 12
    KBINREL         shift and go to state 22
    NOT             shift and go to state 25
    FUNC            shift and go to state 15
    LARGEOP         shift and go to state 5
    ORD             shift and go to state 26

    function                       shift and go to state 10
    char                           shift and go to state 1
    frac                           shift and go to state 3
    binop                          shift and go to state 13
    chars                          shift and go to state 14
    content                        shift and go to state 35
    command                        shift and go to state 23
    block                          shift and go to state 24
    binrel                         shift and go to state 2
    not                            shift and go to state 16
    ord                            shift and go to state 18
    root                           shift and go to state 27
    larop                          shift and go to state 19
    scripted                       shift and go to state 9

state 33

    (64) larop -> LARGEOP SUP . char SUB char
    (65) larop -> LARGEOP SUP . char SUB block
    (66) larop -> LARGEOP SUP . block SUB char
    (67) larop -> LARGEOP SUP . block SUB block
    (12) char -> . CHAR
    (13) char -> . ord
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (14) ord -> . ORD

    CHAR            shift and go to state 20
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 26

    char                           shift and go to state 50
    ord                            shift and go to state 18
    block                          shift and go to state 51

state 34

    (60) larop -> LARGEOP SUB . char SUP char
    (61) larop -> LARGEOP SUB . char SUP block
    (62) larop -> LARGEOP SUB . block SUP char
    (63) larop -> LARGEOP SUB . block SUP block
    (69) larop -> LARGEOP SUB . char
    (70) larop -> LARGEOP SUB . block
    (12) char -> . CHAR
    (13) char -> . ord
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (14) ord -> . ORD

    CHAR            shift and go to state 20
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 26

    char                           shift and go to state 52
    ord                            shift and go to state 18
    block                          shift and go to state 53

state 35

    (9) content -> content content .
    (9) content -> content . content
    (5) content -> . chars
    (6) content -> . block
    (7) content -> . scripted
    (8) content -> . command
    (9) content -> . content content
    (10) chars -> . char
    (11) chars -> . char chars
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (22) scripted -> . char SUP char
    (23) scripted -> . char SUP block
    (24) scripted -> . block SUP char
    (25) scripted -> . block SUP block
    (26) scripted -> . char SUB char
    (27) scripted -> . char SUB block
    (28) scripted -> . block SUB char
    (29) scripted -> . block SUB block
    (30) scripted -> . char SUP char SUB char
    (31) scripted -> . char SUP char SUB block
    (32) scripted -> . char SUP block SUB char
    (33) scripted -> . char SUP block SUB block
    (34) scripted -> . block SUP char SUB char
    (35) scripted -> . block SUP char SUB block
    (36) scripted -> . block SUP block SUB char
    (37) scripted -> . block SUP block SUB block
    (38) scripted -> . char SUB char SUP char
    (39) scripted -> . char SUB char SUP block
    (40) scripted -> . char SUB block SUP char
    (41) scripted -> . char SUB block SUP block
    (42) scripted -> . block SUB char SUP char
    (43) scripted -> . block SUB char SUP block
    (44) scripted -> . block SUB block SUP char
    (45) scripted -> . block SUB block SUP block
    (15) command -> . frac
    (16) command -> . root
    (17) command -> . binop
    (18) command -> . binrel
    (19) command -> . not
    (20) command -> . function
    (21) command -> . larop
    (12) char -> . CHAR
    (13) char -> . ord
    (46) frac -> . FRAC char char
    (47) frac -> . FRAC char block
    (48) frac -> . FRAC block char
    (49) frac -> . FRAC block block
    (50) root -> . ROOT char
    (51) root -> . ROOT block
    (52) root -> . ROOT sblock char
    (53) root -> . ROOT sblock block
    (54) binop -> . BINOP
    (55) binop -> . KBINOP
    (56) binrel -> . BINREL
    (57) binrel -> . KBINREL
    (58) not -> . NOT
    (59) function -> . FUNC
    (60) larop -> . LARGEOP SUB char SUP char
    (61) larop -> . LARGEOP SUB char SUP block
    (62) larop -> . LARGEOP SUB block SUP char
    (63) larop -> . LARGEOP SUB block SUP block
    (64) larop -> . LARGEOP SUP char SUB char
    (65) larop -> . LARGEOP SUP char SUB block
    (66) larop -> . LARGEOP SUP block SUB char
    (67) larop -> . LARGEOP SUP block SUB block
    (68) larop -> . LARGEOP
    (69) larop -> . LARGEOP SUB char
    (70) larop -> . LARGEOP SUB block
    (14) ord -> . ORD

  ! shift/reduce conflict for BEGINBLOCK resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FRAC resolved as shift
  ! shift/reduce conflict for ROOT resolved as shift
  ! shift/reduce conflict for BINOP resolved as shift
  ! shift/reduce conflict for KBINOP resolved as shift
  ! shift/reduce conflict for BINREL resolved as shift
  ! shift/reduce conflict for KBINREL resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for LARGEOP resolved as shift
  ! shift/reduce conflict for ORD resolved as shift
    $end            reduce using rule 9 (content -> content content .)
    ENDBLOCK        reduce using rule 9 (content -> content content .)
    ENDSBLOCK       reduce using rule 9 (content -> content content .)
    BEGINBLOCK      shift and go to state 4
    CHAR            shift and go to state 20
    FRAC            shift and go to state 11
    ROOT            shift and go to state 8
    BINOP           shift and go to state 21
    KBINOP          shift and go to state 17
    BINREL          shift and go to state 12
    KBINREL         shift and go to state 22
    NOT             shift and go to state 25
    FUNC            shift and go to state 15
    LARGEOP         shift and go to state 5
    ORD             shift and go to state 26

  ! BEGINBLOCK      [ reduce using rule 9 (content -> content content .) ]
  ! CHAR            [ reduce using rule 9 (content -> content content .) ]
  ! FRAC            [ reduce using rule 9 (content -> content content .) ]
  ! ROOT            [ reduce using rule 9 (content -> content content .) ]
  ! BINOP           [ reduce using rule 9 (content -> content content .) ]
  ! KBINOP          [ reduce using rule 9 (content -> content content .) ]
  ! BINREL          [ reduce using rule 9 (content -> content content .) ]
  ! KBINREL         [ reduce using rule 9 (content -> content content .) ]
  ! NOT             [ reduce using rule 9 (content -> content content .) ]
  ! FUNC            [ reduce using rule 9 (content -> content content .) ]
  ! LARGEOP         [ reduce using rule 9 (content -> content content .) ]
  ! ORD             [ reduce using rule 9 (content -> content content .) ]

    function                       shift and go to state 10
    char                           shift and go to state 1
    frac                           shift and go to state 3
    binop                          shift and go to state 13
    chars                          shift and go to state 14
    content                        shift and go to state 35
    command                        shift and go to state 23
    block                          shift and go to state 24
    binrel                         shift and go to state 2
    not                            shift and go to state 16
    ord                            shift and go to state 18
    root                           shift and go to state 27
    larop                          shift and go to state 19
    scripted                       shift and go to state 9

state 36

    (2) start -> start content .
    (9) content -> content . content
    (5) content -> . chars
    (6) content -> . block
    (7) content -> . scripted
    (8) content -> . command
    (9) content -> . content content
    (10) chars -> . char
    (11) chars -> . char chars
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (22) scripted -> . char SUP char
    (23) scripted -> . char SUP block
    (24) scripted -> . block SUP char
    (25) scripted -> . block SUP block
    (26) scripted -> . char SUB char
    (27) scripted -> . char SUB block
    (28) scripted -> . block SUB char
    (29) scripted -> . block SUB block
    (30) scripted -> . char SUP char SUB char
    (31) scripted -> . char SUP char SUB block
    (32) scripted -> . char SUP block SUB char
    (33) scripted -> . char SUP block SUB block
    (34) scripted -> . block SUP char SUB char
    (35) scripted -> . block SUP char SUB block
    (36) scripted -> . block SUP block SUB char
    (37) scripted -> . block SUP block SUB block
    (38) scripted -> . char SUB char SUP char
    (39) scripted -> . char SUB char SUP block
    (40) scripted -> . char SUB block SUP char
    (41) scripted -> . char SUB block SUP block
    (42) scripted -> . block SUB char SUP char
    (43) scripted -> . block SUB char SUP block
    (44) scripted -> . block SUB block SUP char
    (45) scripted -> . block SUB block SUP block
    (15) command -> . frac
    (16) command -> . root
    (17) command -> . binop
    (18) command -> . binrel
    (19) command -> . not
    (20) command -> . function
    (21) command -> . larop
    (12) char -> . CHAR
    (13) char -> . ord
    (46) frac -> . FRAC char char
    (47) frac -> . FRAC char block
    (48) frac -> . FRAC block char
    (49) frac -> . FRAC block block
    (50) root -> . ROOT char
    (51) root -> . ROOT block
    (52) root -> . ROOT sblock char
    (53) root -> . ROOT sblock block
    (54) binop -> . BINOP
    (55) binop -> . KBINOP
    (56) binrel -> . BINREL
    (57) binrel -> . KBINREL
    (58) not -> . NOT
    (59) function -> . FUNC
    (60) larop -> . LARGEOP SUB char SUP char
    (61) larop -> . LARGEOP SUB char SUP block
    (62) larop -> . LARGEOP SUB block SUP char
    (63) larop -> . LARGEOP SUB block SUP block
    (64) larop -> . LARGEOP SUP char SUB char
    (65) larop -> . LARGEOP SUP char SUB block
    (66) larop -> . LARGEOP SUP block SUB char
    (67) larop -> . LARGEOP SUP block SUB block
    (68) larop -> . LARGEOP
    (69) larop -> . LARGEOP SUB char
    (70) larop -> . LARGEOP SUB block
    (14) ord -> . ORD

  ! shift/reduce conflict for BEGINBLOCK resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FRAC resolved as shift
  ! shift/reduce conflict for ROOT resolved as shift
  ! shift/reduce conflict for BINOP resolved as shift
  ! shift/reduce conflict for KBINOP resolved as shift
  ! shift/reduce conflict for BINREL resolved as shift
  ! shift/reduce conflict for KBINREL resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for LARGEOP resolved as shift
  ! shift/reduce conflict for ORD resolved as shift
    $end            reduce using rule 2 (start -> start content .)
    BEGINBLOCK      shift and go to state 4
    CHAR            shift and go to state 20
    FRAC            shift and go to state 11
    ROOT            shift and go to state 8
    BINOP           shift and go to state 21
    KBINOP          shift and go to state 17
    BINREL          shift and go to state 12
    KBINREL         shift and go to state 22
    NOT             shift and go to state 25
    FUNC            shift and go to state 15
    LARGEOP         shift and go to state 5
    ORD             shift and go to state 26

  ! BEGINBLOCK      [ reduce using rule 2 (start -> start content .) ]
  ! CHAR            [ reduce using rule 2 (start -> start content .) ]
  ! FRAC            [ reduce using rule 2 (start -> start content .) ]
  ! ROOT            [ reduce using rule 2 (start -> start content .) ]
  ! BINOP           [ reduce using rule 2 (start -> start content .) ]
  ! KBINOP          [ reduce using rule 2 (start -> start content .) ]
  ! BINREL          [ reduce using rule 2 (start -> start content .) ]
  ! KBINREL         [ reduce using rule 2 (start -> start content .) ]
  ! NOT             [ reduce using rule 2 (start -> start content .) ]
  ! FUNC            [ reduce using rule 2 (start -> start content .) ]
  ! LARGEOP         [ reduce using rule 2 (start -> start content .) ]
  ! ORD             [ reduce using rule 2 (start -> start content .) ]

    function                       shift and go to state 10
    char                           shift and go to state 1
    frac                           shift and go to state 3
    binop                          shift and go to state 13
    chars                          shift and go to state 14
    content                        shift and go to state 35
    command                        shift and go to state 23
    block                          shift and go to state 24
    binrel                         shift and go to state 2
    not                            shift and go to state 16
    ord                            shift and go to state 18
    root                           shift and go to state 27
    larop                          shift and go to state 19
    scripted                       shift and go to state 9

state 37

    (52) root -> ROOT sblock . char
    (53) root -> ROOT sblock . block
    (12) char -> . CHAR
    (13) char -> . ord
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (14) ord -> . ORD

    CHAR            shift and go to state 20
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 26

    char                           shift and go to state 54
    ord                            shift and go to state 18
    block                          shift and go to state 55

state 38

    (50) root -> ROOT char .

    BEGINBLOCK      reduce using rule 50 (root -> ROOT char .)
    CHAR            reduce using rule 50 (root -> ROOT char .)
    FRAC            reduce using rule 50 (root -> ROOT char .)
    ROOT            reduce using rule 50 (root -> ROOT char .)
    BINOP           reduce using rule 50 (root -> ROOT char .)
    KBINOP          reduce using rule 50 (root -> ROOT char .)
    BINREL          reduce using rule 50 (root -> ROOT char .)
    KBINREL         reduce using rule 50 (root -> ROOT char .)
    NOT             reduce using rule 50 (root -> ROOT char .)
    FUNC            reduce using rule 50 (root -> ROOT char .)
    LARGEOP         reduce using rule 50 (root -> ROOT char .)
    ORD             reduce using rule 50 (root -> ROOT char .)
    ENDSBLOCK       reduce using rule 50 (root -> ROOT char .)
    ENDBLOCK        reduce using rule 50 (root -> ROOT char .)
    $end            reduce using rule 50 (root -> ROOT char .)


state 39

    (3) sblock -> BEGINSBLOCK . content ENDSBLOCK
    (5) content -> . chars
    (6) content -> . block
    (7) content -> . scripted
    (8) content -> . command
    (9) content -> . content content
    (10) chars -> . char
    (11) chars -> . char chars
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (22) scripted -> . char SUP char
    (23) scripted -> . char SUP block
    (24) scripted -> . block SUP char
    (25) scripted -> . block SUP block
    (26) scripted -> . char SUB char
    (27) scripted -> . char SUB block
    (28) scripted -> . block SUB char
    (29) scripted -> . block SUB block
    (30) scripted -> . char SUP char SUB char
    (31) scripted -> . char SUP char SUB block
    (32) scripted -> . char SUP block SUB char
    (33) scripted -> . char SUP block SUB block
    (34) scripted -> . block SUP char SUB char
    (35) scripted -> . block SUP char SUB block
    (36) scripted -> . block SUP block SUB char
    (37) scripted -> . block SUP block SUB block
    (38) scripted -> . char SUB char SUP char
    (39) scripted -> . char SUB char SUP block
    (40) scripted -> . char SUB block SUP char
    (41) scripted -> . char SUB block SUP block
    (42) scripted -> . block SUB char SUP char
    (43) scripted -> . block SUB char SUP block
    (44) scripted -> . block SUB block SUP char
    (45) scripted -> . block SUB block SUP block
    (15) command -> . frac
    (16) command -> . root
    (17) command -> . binop
    (18) command -> . binrel
    (19) command -> . not
    (20) command -> . function
    (21) command -> . larop
    (12) char -> . CHAR
    (13) char -> . ord
    (46) frac -> . FRAC char char
    (47) frac -> . FRAC char block
    (48) frac -> . FRAC block char
    (49) frac -> . FRAC block block
    (50) root -> . ROOT char
    (51) root -> . ROOT block
    (52) root -> . ROOT sblock char
    (53) root -> . ROOT sblock block
    (54) binop -> . BINOP
    (55) binop -> . KBINOP
    (56) binrel -> . BINREL
    (57) binrel -> . KBINREL
    (58) not -> . NOT
    (59) function -> . FUNC
    (60) larop -> . LARGEOP SUB char SUP char
    (61) larop -> . LARGEOP SUB char SUP block
    (62) larop -> . LARGEOP SUB block SUP char
    (63) larop -> . LARGEOP SUB block SUP block
    (64) larop -> . LARGEOP SUP char SUB char
    (65) larop -> . LARGEOP SUP char SUB block
    (66) larop -> . LARGEOP SUP block SUB char
    (67) larop -> . LARGEOP SUP block SUB block
    (68) larop -> . LARGEOP
    (69) larop -> . LARGEOP SUB char
    (70) larop -> . LARGEOP SUB block
    (14) ord -> . ORD

    BEGINBLOCK      shift and go to state 4
    CHAR            shift and go to state 20
    FRAC            shift and go to state 11
    ROOT            shift and go to state 8
    BINOP           shift and go to state 21
    KBINOP          shift and go to state 17
    BINREL          shift and go to state 12
    KBINREL         shift and go to state 22
    NOT             shift and go to state 25
    FUNC            shift and go to state 15
    LARGEOP         shift and go to state 5
    ORD             shift and go to state 26

    function                       shift and go to state 10
    char                           shift and go to state 1
    frac                           shift and go to state 3
    binop                          shift and go to state 13
    chars                          shift and go to state 14
    content                        shift and go to state 56
    command                        shift and go to state 23
    block                          shift and go to state 24
    binrel                         shift and go to state 2
    not                            shift and go to state 16
    ord                            shift and go to state 18
    root                           shift and go to state 27
    larop                          shift and go to state 19
    scripted                       shift and go to state 9

state 40

    (51) root -> ROOT block .

    BEGINBLOCK      reduce using rule 51 (root -> ROOT block .)
    CHAR            reduce using rule 51 (root -> ROOT block .)
    FRAC            reduce using rule 51 (root -> ROOT block .)
    ROOT            reduce using rule 51 (root -> ROOT block .)
    BINOP           reduce using rule 51 (root -> ROOT block .)
    KBINOP          reduce using rule 51 (root -> ROOT block .)
    BINREL          reduce using rule 51 (root -> ROOT block .)
    KBINREL         reduce using rule 51 (root -> ROOT block .)
    NOT             reduce using rule 51 (root -> ROOT block .)
    FUNC            reduce using rule 51 (root -> ROOT block .)
    LARGEOP         reduce using rule 51 (root -> ROOT block .)
    ORD             reduce using rule 51 (root -> ROOT block .)
    ENDSBLOCK       reduce using rule 51 (root -> ROOT block .)
    ENDBLOCK        reduce using rule 51 (root -> ROOT block .)
    $end            reduce using rule 51 (root -> ROOT block .)


state 41

    (46) frac -> FRAC char . char
    (47) frac -> FRAC char . block
    (12) char -> . CHAR
    (13) char -> . ord
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (14) ord -> . ORD

    CHAR            shift and go to state 20
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 26

    char                           shift and go to state 57
    ord                            shift and go to state 18
    block                          shift and go to state 58

state 42

    (48) frac -> FRAC block . char
    (49) frac -> FRAC block . block
    (12) char -> . CHAR
    (13) char -> . ord
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (14) ord -> . ORD

    CHAR            shift and go to state 20
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 26

    char                           shift and go to state 59
    ord                            shift and go to state 18
    block                          shift and go to state 60

state 43

    (28) scripted -> block SUB . char
    (29) scripted -> block SUB . block
    (42) scripted -> block SUB . char SUP char
    (43) scripted -> block SUB . char SUP block
    (44) scripted -> block SUB . block SUP char
    (45) scripted -> block SUB . block SUP block
    (12) char -> . CHAR
    (13) char -> . ord
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (14) ord -> . ORD

    CHAR            shift and go to state 20
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 26

    char                           shift and go to state 61
    ord                            shift and go to state 18
    block                          shift and go to state 62

state 44

    (24) scripted -> block SUP . char
    (25) scripted -> block SUP . block
    (34) scripted -> block SUP . char SUB char
    (35) scripted -> block SUP . char SUB block
    (36) scripted -> block SUP . block SUB char
    (37) scripted -> block SUP . block SUB block
    (12) char -> . CHAR
    (13) char -> . ord
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (14) ord -> . ORD

    CHAR            shift and go to state 20
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 26

    char                           shift and go to state 63
    ord                            shift and go to state 18
    block                          shift and go to state 64

state 45

    (26) scripted -> char SUB char .
    (38) scripted -> char SUB char . SUP char
    (39) scripted -> char SUB char . SUP block

    BEGINBLOCK      reduce using rule 26 (scripted -> char SUB char .)
    CHAR            reduce using rule 26 (scripted -> char SUB char .)
    FRAC            reduce using rule 26 (scripted -> char SUB char .)
    ROOT            reduce using rule 26 (scripted -> char SUB char .)
    BINOP           reduce using rule 26 (scripted -> char SUB char .)
    KBINOP          reduce using rule 26 (scripted -> char SUB char .)
    BINREL          reduce using rule 26 (scripted -> char SUB char .)
    KBINREL         reduce using rule 26 (scripted -> char SUB char .)
    NOT             reduce using rule 26 (scripted -> char SUB char .)
    FUNC            reduce using rule 26 (scripted -> char SUB char .)
    LARGEOP         reduce using rule 26 (scripted -> char SUB char .)
    ORD             reduce using rule 26 (scripted -> char SUB char .)
    $end            reduce using rule 26 (scripted -> char SUB char .)
    ENDBLOCK        reduce using rule 26 (scripted -> char SUB char .)
    ENDSBLOCK       reduce using rule 26 (scripted -> char SUB char .)
    SUP             shift and go to state 65


state 46

    (27) scripted -> char SUB block .
    (40) scripted -> char SUB block . SUP char
    (41) scripted -> char SUB block . SUP block

    BEGINBLOCK      reduce using rule 27 (scripted -> char SUB block .)
    CHAR            reduce using rule 27 (scripted -> char SUB block .)
    FRAC            reduce using rule 27 (scripted -> char SUB block .)
    ROOT            reduce using rule 27 (scripted -> char SUB block .)
    BINOP           reduce using rule 27 (scripted -> char SUB block .)
    KBINOP          reduce using rule 27 (scripted -> char SUB block .)
    BINREL          reduce using rule 27 (scripted -> char SUB block .)
    KBINREL         reduce using rule 27 (scripted -> char SUB block .)
    NOT             reduce using rule 27 (scripted -> char SUB block .)
    FUNC            reduce using rule 27 (scripted -> char SUB block .)
    LARGEOP         reduce using rule 27 (scripted -> char SUB block .)
    ORD             reduce using rule 27 (scripted -> char SUB block .)
    $end            reduce using rule 27 (scripted -> char SUB block .)
    ENDBLOCK        reduce using rule 27 (scripted -> char SUB block .)
    ENDSBLOCK       reduce using rule 27 (scripted -> char SUB block .)
    SUP             shift and go to state 66


state 47

    (22) scripted -> char SUP char .
    (30) scripted -> char SUP char . SUB char
    (31) scripted -> char SUP char . SUB block

    BEGINBLOCK      reduce using rule 22 (scripted -> char SUP char .)
    CHAR            reduce using rule 22 (scripted -> char SUP char .)
    FRAC            reduce using rule 22 (scripted -> char SUP char .)
    ROOT            reduce using rule 22 (scripted -> char SUP char .)
    BINOP           reduce using rule 22 (scripted -> char SUP char .)
    KBINOP          reduce using rule 22 (scripted -> char SUP char .)
    BINREL          reduce using rule 22 (scripted -> char SUP char .)
    KBINREL         reduce using rule 22 (scripted -> char SUP char .)
    NOT             reduce using rule 22 (scripted -> char SUP char .)
    FUNC            reduce using rule 22 (scripted -> char SUP char .)
    LARGEOP         reduce using rule 22 (scripted -> char SUP char .)
    ORD             reduce using rule 22 (scripted -> char SUP char .)
    $end            reduce using rule 22 (scripted -> char SUP char .)
    ENDBLOCK        reduce using rule 22 (scripted -> char SUP char .)
    ENDSBLOCK       reduce using rule 22 (scripted -> char SUP char .)
    SUB             shift and go to state 67


state 48

    (23) scripted -> char SUP block .
    (32) scripted -> char SUP block . SUB char
    (33) scripted -> char SUP block . SUB block

    BEGINBLOCK      reduce using rule 23 (scripted -> char SUP block .)
    CHAR            reduce using rule 23 (scripted -> char SUP block .)
    FRAC            reduce using rule 23 (scripted -> char SUP block .)
    ROOT            reduce using rule 23 (scripted -> char SUP block .)
    BINOP           reduce using rule 23 (scripted -> char SUP block .)
    KBINOP          reduce using rule 23 (scripted -> char SUP block .)
    BINREL          reduce using rule 23 (scripted -> char SUP block .)
    KBINREL         reduce using rule 23 (scripted -> char SUP block .)
    NOT             reduce using rule 23 (scripted -> char SUP block .)
    FUNC            reduce using rule 23 (scripted -> char SUP block .)
    LARGEOP         reduce using rule 23 (scripted -> char SUP block .)
    ORD             reduce using rule 23 (scripted -> char SUP block .)
    $end            reduce using rule 23 (scripted -> char SUP block .)
    ENDBLOCK        reduce using rule 23 (scripted -> char SUP block .)
    ENDSBLOCK       reduce using rule 23 (scripted -> char SUP block .)
    SUB             shift and go to state 68


state 49

    (4) block -> BEGINBLOCK content ENDBLOCK .

    BEGINBLOCK      reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    CHAR            reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    FRAC            reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    ROOT            reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    BINOP           reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    KBINOP          reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    BINREL          reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    KBINREL         reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    NOT             reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    FUNC            reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    LARGEOP         reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    ORD             reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    $end            reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    ENDBLOCK        reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    ENDSBLOCK       reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    SUP             reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)
    SUB             reduce using rule 4 (block -> BEGINBLOCK content ENDBLOCK .)


state 50

    (64) larop -> LARGEOP SUP char . SUB char
    (65) larop -> LARGEOP SUP char . SUB block

    SUB             shift and go to state 69


state 51

    (66) larop -> LARGEOP SUP block . SUB char
    (67) larop -> LARGEOP SUP block . SUB block

    SUB             shift and go to state 70


state 52

    (60) larop -> LARGEOP SUB char . SUP char
    (61) larop -> LARGEOP SUB char . SUP block
    (69) larop -> LARGEOP SUB char .

    SUP             shift and go to state 71
    BEGINBLOCK      reduce using rule 69 (larop -> LARGEOP SUB char .)
    CHAR            reduce using rule 69 (larop -> LARGEOP SUB char .)
    FRAC            reduce using rule 69 (larop -> LARGEOP SUB char .)
    ROOT            reduce using rule 69 (larop -> LARGEOP SUB char .)
    BINOP           reduce using rule 69 (larop -> LARGEOP SUB char .)
    KBINOP          reduce using rule 69 (larop -> LARGEOP SUB char .)
    BINREL          reduce using rule 69 (larop -> LARGEOP SUB char .)
    KBINREL         reduce using rule 69 (larop -> LARGEOP SUB char .)
    NOT             reduce using rule 69 (larop -> LARGEOP SUB char .)
    FUNC            reduce using rule 69 (larop -> LARGEOP SUB char .)
    LARGEOP         reduce using rule 69 (larop -> LARGEOP SUB char .)
    ORD             reduce using rule 69 (larop -> LARGEOP SUB char .)
    ENDBLOCK        reduce using rule 69 (larop -> LARGEOP SUB char .)
    $end            reduce using rule 69 (larop -> LARGEOP SUB char .)
    ENDSBLOCK       reduce using rule 69 (larop -> LARGEOP SUB char .)


state 53

    (62) larop -> LARGEOP SUB block . SUP char
    (63) larop -> LARGEOP SUB block . SUP block
    (70) larop -> LARGEOP SUB block .

    SUP             shift and go to state 72
    BEGINBLOCK      reduce using rule 70 (larop -> LARGEOP SUB block .)
    CHAR            reduce using rule 70 (larop -> LARGEOP SUB block .)
    FRAC            reduce using rule 70 (larop -> LARGEOP SUB block .)
    ROOT            reduce using rule 70 (larop -> LARGEOP SUB block .)
    BINOP           reduce using rule 70 (larop -> LARGEOP SUB block .)
    KBINOP          reduce using rule 70 (larop -> LARGEOP SUB block .)
    BINREL          reduce using rule 70 (larop -> LARGEOP SUB block .)
    KBINREL         reduce using rule 70 (larop -> LARGEOP SUB block .)
    NOT             reduce using rule 70 (larop -> LARGEOP SUB block .)
    FUNC            reduce using rule 70 (larop -> LARGEOP SUB block .)
    LARGEOP         reduce using rule 70 (larop -> LARGEOP SUB block .)
    ORD             reduce using rule 70 (larop -> LARGEOP SUB block .)
    ENDBLOCK        reduce using rule 70 (larop -> LARGEOP SUB block .)
    $end            reduce using rule 70 (larop -> LARGEOP SUB block .)
    ENDSBLOCK       reduce using rule 70 (larop -> LARGEOP SUB block .)


state 54

    (52) root -> ROOT sblock char .

    BEGINBLOCK      reduce using rule 52 (root -> ROOT sblock char .)
    CHAR            reduce using rule 52 (root -> ROOT sblock char .)
    FRAC            reduce using rule 52 (root -> ROOT sblock char .)
    ROOT            reduce using rule 52 (root -> ROOT sblock char .)
    BINOP           reduce using rule 52 (root -> ROOT sblock char .)
    KBINOP          reduce using rule 52 (root -> ROOT sblock char .)
    BINREL          reduce using rule 52 (root -> ROOT sblock char .)
    KBINREL         reduce using rule 52 (root -> ROOT sblock char .)
    NOT             reduce using rule 52 (root -> ROOT sblock char .)
    FUNC            reduce using rule 52 (root -> ROOT sblock char .)
    LARGEOP         reduce using rule 52 (root -> ROOT sblock char .)
    ORD             reduce using rule 52 (root -> ROOT sblock char .)
    ENDSBLOCK       reduce using rule 52 (root -> ROOT sblock char .)
    ENDBLOCK        reduce using rule 52 (root -> ROOT sblock char .)
    $end            reduce using rule 52 (root -> ROOT sblock char .)


state 55

    (53) root -> ROOT sblock block .

    BEGINBLOCK      reduce using rule 53 (root -> ROOT sblock block .)
    CHAR            reduce using rule 53 (root -> ROOT sblock block .)
    FRAC            reduce using rule 53 (root -> ROOT sblock block .)
    ROOT            reduce using rule 53 (root -> ROOT sblock block .)
    BINOP           reduce using rule 53 (root -> ROOT sblock block .)
    KBINOP          reduce using rule 53 (root -> ROOT sblock block .)
    BINREL          reduce using rule 53 (root -> ROOT sblock block .)
    KBINREL         reduce using rule 53 (root -> ROOT sblock block .)
    NOT             reduce using rule 53 (root -> ROOT sblock block .)
    FUNC            reduce using rule 53 (root -> ROOT sblock block .)
    LARGEOP         reduce using rule 53 (root -> ROOT sblock block .)
    ORD             reduce using rule 53 (root -> ROOT sblock block .)
    ENDSBLOCK       reduce using rule 53 (root -> ROOT sblock block .)
    ENDBLOCK        reduce using rule 53 (root -> ROOT sblock block .)
    $end            reduce using rule 53 (root -> ROOT sblock block .)


state 56

    (3) sblock -> BEGINSBLOCK content . ENDSBLOCK
    (9) content -> content . content
    (5) content -> . chars
    (6) content -> . block
    (7) content -> . scripted
    (8) content -> . command
    (9) content -> . content content
    (10) chars -> . char
    (11) chars -> . char chars
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (22) scripted -> . char SUP char
    (23) scripted -> . char SUP block
    (24) scripted -> . block SUP char
    (25) scripted -> . block SUP block
    (26) scripted -> . char SUB char
    (27) scripted -> . char SUB block
    (28) scripted -> . block SUB char
    (29) scripted -> . block SUB block
    (30) scripted -> . char SUP char SUB char
    (31) scripted -> . char SUP char SUB block
    (32) scripted -> . char SUP block SUB char
    (33) scripted -> . char SUP block SUB block
    (34) scripted -> . block SUP char SUB char
    (35) scripted -> . block SUP char SUB block
    (36) scripted -> . block SUP block SUB char
    (37) scripted -> . block SUP block SUB block
    (38) scripted -> . char SUB char SUP char
    (39) scripted -> . char SUB char SUP block
    (40) scripted -> . char SUB block SUP char
    (41) scripted -> . char SUB block SUP block
    (42) scripted -> . block SUB char SUP char
    (43) scripted -> . block SUB char SUP block
    (44) scripted -> . block SUB block SUP char
    (45) scripted -> . block SUB block SUP block
    (15) command -> . frac
    (16) command -> . root
    (17) command -> . binop
    (18) command -> . binrel
    (19) command -> . not
    (20) command -> . function
    (21) command -> . larop
    (12) char -> . CHAR
    (13) char -> . ord
    (46) frac -> . FRAC char char
    (47) frac -> . FRAC char block
    (48) frac -> . FRAC block char
    (49) frac -> . FRAC block block
    (50) root -> . ROOT char
    (51) root -> . ROOT block
    (52) root -> . ROOT sblock char
    (53) root -> . ROOT sblock block
    (54) binop -> . BINOP
    (55) binop -> . KBINOP
    (56) binrel -> . BINREL
    (57) binrel -> . KBINREL
    (58) not -> . NOT
    (59) function -> . FUNC
    (60) larop -> . LARGEOP SUB char SUP char
    (61) larop -> . LARGEOP SUB char SUP block
    (62) larop -> . LARGEOP SUB block SUP char
    (63) larop -> . LARGEOP SUB block SUP block
    (64) larop -> . LARGEOP SUP char SUB char
    (65) larop -> . LARGEOP SUP char SUB block
    (66) larop -> . LARGEOP SUP block SUB char
    (67) larop -> . LARGEOP SUP block SUB block
    (68) larop -> . LARGEOP
    (69) larop -> . LARGEOP SUB char
    (70) larop -> . LARGEOP SUB block
    (14) ord -> . ORD

    ENDSBLOCK       shift and go to state 73
    BEGINBLOCK      shift and go to state 4
    CHAR            shift and go to state 20
    FRAC            shift and go to state 11
    ROOT            shift and go to state 8
    BINOP           shift and go to state 21
    KBINOP          shift and go to state 17
    BINREL          shift and go to state 12
    KBINREL         shift and go to state 22
    NOT             shift and go to state 25
    FUNC            shift and go to state 15
    LARGEOP         shift and go to state 5
    ORD             shift and go to state 26

    function                       shift and go to state 10
    char                           shift and go to state 1
    frac                           shift and go to state 3
    binop                          shift and go to state 13
    chars                          shift and go to state 14
    content                        shift and go to state 35
    command                        shift and go to state 23
    block                          shift and go to state 24
    binrel                         shift and go to state 2
    not                            shift and go to state 16
    ord                            shift and go to state 18
    root                           shift and go to state 27
    larop                          shift and go to state 19
    scripted                       shift and go to state 9

state 57

    (46) frac -> FRAC char char .

    BEGINBLOCK      reduce using rule 46 (frac -> FRAC char char .)
    CHAR            reduce using rule 46 (frac -> FRAC char char .)
    FRAC            reduce using rule 46 (frac -> FRAC char char .)
    ROOT            reduce using rule 46 (frac -> FRAC char char .)
    BINOP           reduce using rule 46 (frac -> FRAC char char .)
    KBINOP          reduce using rule 46 (frac -> FRAC char char .)
    BINREL          reduce using rule 46 (frac -> FRAC char char .)
    KBINREL         reduce using rule 46 (frac -> FRAC char char .)
    NOT             reduce using rule 46 (frac -> FRAC char char .)
    FUNC            reduce using rule 46 (frac -> FRAC char char .)
    LARGEOP         reduce using rule 46 (frac -> FRAC char char .)
    ORD             reduce using rule 46 (frac -> FRAC char char .)
    $end            reduce using rule 46 (frac -> FRAC char char .)
    ENDBLOCK        reduce using rule 46 (frac -> FRAC char char .)
    ENDSBLOCK       reduce using rule 46 (frac -> FRAC char char .)


state 58

    (47) frac -> FRAC char block .

    BEGINBLOCK      reduce using rule 47 (frac -> FRAC char block .)
    CHAR            reduce using rule 47 (frac -> FRAC char block .)
    FRAC            reduce using rule 47 (frac -> FRAC char block .)
    ROOT            reduce using rule 47 (frac -> FRAC char block .)
    BINOP           reduce using rule 47 (frac -> FRAC char block .)
    KBINOP          reduce using rule 47 (frac -> FRAC char block .)
    BINREL          reduce using rule 47 (frac -> FRAC char block .)
    KBINREL         reduce using rule 47 (frac -> FRAC char block .)
    NOT             reduce using rule 47 (frac -> FRAC char block .)
    FUNC            reduce using rule 47 (frac -> FRAC char block .)
    LARGEOP         reduce using rule 47 (frac -> FRAC char block .)
    ORD             reduce using rule 47 (frac -> FRAC char block .)
    $end            reduce using rule 47 (frac -> FRAC char block .)
    ENDBLOCK        reduce using rule 47 (frac -> FRAC char block .)
    ENDSBLOCK       reduce using rule 47 (frac -> FRAC char block .)


state 59

    (48) frac -> FRAC block char .

    BEGINBLOCK      reduce using rule 48 (frac -> FRAC block char .)
    CHAR            reduce using rule 48 (frac -> FRAC block char .)
    FRAC            reduce using rule 48 (frac -> FRAC block char .)
    ROOT            reduce using rule 48 (frac -> FRAC block char .)
    BINOP           reduce using rule 48 (frac -> FRAC block char .)
    KBINOP          reduce using rule 48 (frac -> FRAC block char .)
    BINREL          reduce using rule 48 (frac -> FRAC block char .)
    KBINREL         reduce using rule 48 (frac -> FRAC block char .)
    NOT             reduce using rule 48 (frac -> FRAC block char .)
    FUNC            reduce using rule 48 (frac -> FRAC block char .)
    LARGEOP         reduce using rule 48 (frac -> FRAC block char .)
    ORD             reduce using rule 48 (frac -> FRAC block char .)
    $end            reduce using rule 48 (frac -> FRAC block char .)
    ENDBLOCK        reduce using rule 48 (frac -> FRAC block char .)
    ENDSBLOCK       reduce using rule 48 (frac -> FRAC block char .)


state 60

    (49) frac -> FRAC block block .

    BEGINBLOCK      reduce using rule 49 (frac -> FRAC block block .)
    CHAR            reduce using rule 49 (frac -> FRAC block block .)
    FRAC            reduce using rule 49 (frac -> FRAC block block .)
    ROOT            reduce using rule 49 (frac -> FRAC block block .)
    BINOP           reduce using rule 49 (frac -> FRAC block block .)
    KBINOP          reduce using rule 49 (frac -> FRAC block block .)
    BINREL          reduce using rule 49 (frac -> FRAC block block .)
    KBINREL         reduce using rule 49 (frac -> FRAC block block .)
    NOT             reduce using rule 49 (frac -> FRAC block block .)
    FUNC            reduce using rule 49 (frac -> FRAC block block .)
    LARGEOP         reduce using rule 49 (frac -> FRAC block block .)
    ORD             reduce using rule 49 (frac -> FRAC block block .)
    $end            reduce using rule 49 (frac -> FRAC block block .)
    ENDBLOCK        reduce using rule 49 (frac -> FRAC block block .)
    ENDSBLOCK       reduce using rule 49 (frac -> FRAC block block .)


state 61

    (28) scripted -> block SUB char .
    (42) scripted -> block SUB char . SUP char
    (43) scripted -> block SUB char . SUP block

    BEGINBLOCK      reduce using rule 28 (scripted -> block SUB char .)
    CHAR            reduce using rule 28 (scripted -> block SUB char .)
    FRAC            reduce using rule 28 (scripted -> block SUB char .)
    ROOT            reduce using rule 28 (scripted -> block SUB char .)
    BINOP           reduce using rule 28 (scripted -> block SUB char .)
    KBINOP          reduce using rule 28 (scripted -> block SUB char .)
    BINREL          reduce using rule 28 (scripted -> block SUB char .)
    KBINREL         reduce using rule 28 (scripted -> block SUB char .)
    NOT             reduce using rule 28 (scripted -> block SUB char .)
    FUNC            reduce using rule 28 (scripted -> block SUB char .)
    LARGEOP         reduce using rule 28 (scripted -> block SUB char .)
    ORD             reduce using rule 28 (scripted -> block SUB char .)
    $end            reduce using rule 28 (scripted -> block SUB char .)
    ENDBLOCK        reduce using rule 28 (scripted -> block SUB char .)
    ENDSBLOCK       reduce using rule 28 (scripted -> block SUB char .)
    SUP             shift and go to state 74


state 62

    (29) scripted -> block SUB block .
    (44) scripted -> block SUB block . SUP char
    (45) scripted -> block SUB block . SUP block

    BEGINBLOCK      reduce using rule 29 (scripted -> block SUB block .)
    CHAR            reduce using rule 29 (scripted -> block SUB block .)
    FRAC            reduce using rule 29 (scripted -> block SUB block .)
    ROOT            reduce using rule 29 (scripted -> block SUB block .)
    BINOP           reduce using rule 29 (scripted -> block SUB block .)
    KBINOP          reduce using rule 29 (scripted -> block SUB block .)
    BINREL          reduce using rule 29 (scripted -> block SUB block .)
    KBINREL         reduce using rule 29 (scripted -> block SUB block .)
    NOT             reduce using rule 29 (scripted -> block SUB block .)
    FUNC            reduce using rule 29 (scripted -> block SUB block .)
    LARGEOP         reduce using rule 29 (scripted -> block SUB block .)
    ORD             reduce using rule 29 (scripted -> block SUB block .)
    $end            reduce using rule 29 (scripted -> block SUB block .)
    ENDBLOCK        reduce using rule 29 (scripted -> block SUB block .)
    ENDSBLOCK       reduce using rule 29 (scripted -> block SUB block .)
    SUP             shift and go to state 75


state 63

    (24) scripted -> block SUP char .
    (34) scripted -> block SUP char . SUB char
    (35) scripted -> block SUP char . SUB block

    BEGINBLOCK      reduce using rule 24 (scripted -> block SUP char .)
    CHAR            reduce using rule 24 (scripted -> block SUP char .)
    FRAC            reduce using rule 24 (scripted -> block SUP char .)
    ROOT            reduce using rule 24 (scripted -> block SUP char .)
    BINOP           reduce using rule 24 (scripted -> block SUP char .)
    KBINOP          reduce using rule 24 (scripted -> block SUP char .)
    BINREL          reduce using rule 24 (scripted -> block SUP char .)
    KBINREL         reduce using rule 24 (scripted -> block SUP char .)
    NOT             reduce using rule 24 (scripted -> block SUP char .)
    FUNC            reduce using rule 24 (scripted -> block SUP char .)
    LARGEOP         reduce using rule 24 (scripted -> block SUP char .)
    ORD             reduce using rule 24 (scripted -> block SUP char .)
    $end            reduce using rule 24 (scripted -> block SUP char .)
    ENDBLOCK        reduce using rule 24 (scripted -> block SUP char .)
    ENDSBLOCK       reduce using rule 24 (scripted -> block SUP char .)
    SUB             shift and go to state 76


state 64

    (25) scripted -> block SUP block .
    (36) scripted -> block SUP block . SUB char
    (37) scripted -> block SUP block . SUB block

    BEGINBLOCK      reduce using rule 25 (scripted -> block SUP block .)
    CHAR            reduce using rule 25 (scripted -> block SUP block .)
    FRAC            reduce using rule 25 (scripted -> block SUP block .)
    ROOT            reduce using rule 25 (scripted -> block SUP block .)
    BINOP           reduce using rule 25 (scripted -> block SUP block .)
    KBINOP          reduce using rule 25 (scripted -> block SUP block .)
    BINREL          reduce using rule 25 (scripted -> block SUP block .)
    KBINREL         reduce using rule 25 (scripted -> block SUP block .)
    NOT             reduce using rule 25 (scripted -> block SUP block .)
    FUNC            reduce using rule 25 (scripted -> block SUP block .)
    LARGEOP         reduce using rule 25 (scripted -> block SUP block .)
    ORD             reduce using rule 25 (scripted -> block SUP block .)
    $end            reduce using rule 25 (scripted -> block SUP block .)
    ENDBLOCK        reduce using rule 25 (scripted -> block SUP block .)
    ENDSBLOCK       reduce using rule 25 (scripted -> block SUP block .)
    SUB             shift and go to state 77


state 65

    (38) scripted -> char SUB char SUP . char
    (39) scripted -> char SUB char SUP . block
    (12) char -> . CHAR
    (13) char -> . ord
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (14) ord -> . ORD

    CHAR            shift and go to state 20
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 26

    char                           shift and go to state 78
    ord                            shift and go to state 18
    block                          shift and go to state 79

state 66

    (40) scripted -> char SUB block SUP . char
    (41) scripted -> char SUB block SUP . block
    (12) char -> . CHAR
    (13) char -> . ord
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (14) ord -> . ORD

    CHAR            shift and go to state 20
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 26

    char                           shift and go to state 80
    ord                            shift and go to state 18
    block                          shift and go to state 81

state 67

    (30) scripted -> char SUP char SUB . char
    (31) scripted -> char SUP char SUB . block
    (12) char -> . CHAR
    (13) char -> . ord
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (14) ord -> . ORD

    CHAR            shift and go to state 20
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 26

    char                           shift and go to state 82
    ord                            shift and go to state 18
    block                          shift and go to state 83

state 68

    (32) scripted -> char SUP block SUB . char
    (33) scripted -> char SUP block SUB . block
    (12) char -> . CHAR
    (13) char -> . ord
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (14) ord -> . ORD

    CHAR            shift and go to state 20
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 26

    char                           shift and go to state 84
    ord                            shift and go to state 18
    block                          shift and go to state 85

state 69

    (64) larop -> LARGEOP SUP char SUB . char
    (65) larop -> LARGEOP SUP char SUB . block
    (12) char -> . CHAR
    (13) char -> . ord
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (14) ord -> . ORD

    CHAR            shift and go to state 20
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 26

    char                           shift and go to state 86
    ord                            shift and go to state 18
    block                          shift and go to state 87

state 70

    (66) larop -> LARGEOP SUP block SUB . char
    (67) larop -> LARGEOP SUP block SUB . block
    (12) char -> . CHAR
    (13) char -> . ord
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (14) ord -> . ORD

    CHAR            shift and go to state 20
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 26

    char                           shift and go to state 88
    ord                            shift and go to state 18
    block                          shift and go to state 89

state 71

    (60) larop -> LARGEOP SUB char SUP . char
    (61) larop -> LARGEOP SUB char SUP . block
    (12) char -> . CHAR
    (13) char -> . ord
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (14) ord -> . ORD

    CHAR            shift and go to state 20
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 26

    char                           shift and go to state 90
    ord                            shift and go to state 18
    block                          shift and go to state 91

state 72

    (62) larop -> LARGEOP SUB block SUP . char
    (63) larop -> LARGEOP SUB block SUP . block
    (12) char -> . CHAR
    (13) char -> . ord
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (14) ord -> . ORD

    CHAR            shift and go to state 20
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 26

    char                           shift and go to state 92
    ord                            shift and go to state 18
    block                          shift and go to state 93

state 73

    (3) sblock -> BEGINSBLOCK content ENDSBLOCK .

    CHAR            reduce using rule 3 (sblock -> BEGINSBLOCK content ENDSBLOCK .)
    BEGINBLOCK      reduce using rule 3 (sblock -> BEGINSBLOCK content ENDSBLOCK .)
    ORD             reduce using rule 3 (sblock -> BEGINSBLOCK content ENDSBLOCK .)


state 74

    (42) scripted -> block SUB char SUP . char
    (43) scripted -> block SUB char SUP . block
    (12) char -> . CHAR
    (13) char -> . ord
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (14) ord -> . ORD

    CHAR            shift and go to state 20
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 26

    char                           shift and go to state 94
    ord                            shift and go to state 18
    block                          shift and go to state 95

state 75

    (44) scripted -> block SUB block SUP . char
    (45) scripted -> block SUB block SUP . block
    (12) char -> . CHAR
    (13) char -> . ord
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (14) ord -> . ORD

    CHAR            shift and go to state 20
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 26

    char                           shift and go to state 96
    ord                            shift and go to state 18
    block                          shift and go to state 97

state 76

    (34) scripted -> block SUP char SUB . char
    (35) scripted -> block SUP char SUB . block
    (12) char -> . CHAR
    (13) char -> . ord
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (14) ord -> . ORD

    CHAR            shift and go to state 20
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 26

    char                           shift and go to state 98
    ord                            shift and go to state 18
    block                          shift and go to state 99

state 77

    (36) scripted -> block SUP block SUB . char
    (37) scripted -> block SUP block SUB . block
    (12) char -> . CHAR
    (13) char -> . ord
    (4) block -> . BEGINBLOCK content ENDBLOCK
    (14) ord -> . ORD

    CHAR            shift and go to state 20
    BEGINBLOCK      shift and go to state 4
    ORD             shift and go to state 26

    char                           shift and go to state 100
    ord                            shift and go to state 18
    block                          shift and go to state 101

state 78

    (38) scripted -> char SUB char SUP char .

    BEGINBLOCK      reduce using rule 38 (scripted -> char SUB char SUP char .)
    CHAR            reduce using rule 38 (scripted -> char SUB char SUP char .)
    FRAC            reduce using rule 38 (scripted -> char SUB char SUP char .)
    ROOT            reduce using rule 38 (scripted -> char SUB char SUP char .)
    BINOP           reduce using rule 38 (scripted -> char SUB char SUP char .)
    KBINOP          reduce using rule 38 (scripted -> char SUB char SUP char .)
    BINREL          reduce using rule 38 (scripted -> char SUB char SUP char .)
    KBINREL         reduce using rule 38 (scripted -> char SUB char SUP char .)
    NOT             reduce using rule 38 (scripted -> char SUB char SUP char .)
    FUNC            reduce using rule 38 (scripted -> char SUB char SUP char .)
    LARGEOP         reduce using rule 38 (scripted -> char SUB char SUP char .)
    ORD             reduce using rule 38 (scripted -> char SUB char SUP char .)
    $end            reduce using rule 38 (scripted -> char SUB char SUP char .)
    ENDBLOCK        reduce using rule 38 (scripted -> char SUB char SUP char .)
    ENDSBLOCK       reduce using rule 38 (scripted -> char SUB char SUP char .)


state 79

    (39) scripted -> char SUB char SUP block .

    BEGINBLOCK      reduce using rule 39 (scripted -> char SUB char SUP block .)
    CHAR            reduce using rule 39 (scripted -> char SUB char SUP block .)
    FRAC            reduce using rule 39 (scripted -> char SUB char SUP block .)
    ROOT            reduce using rule 39 (scripted -> char SUB char SUP block .)
    BINOP           reduce using rule 39 (scripted -> char SUB char SUP block .)
    KBINOP          reduce using rule 39 (scripted -> char SUB char SUP block .)
    BINREL          reduce using rule 39 (scripted -> char SUB char SUP block .)
    KBINREL         reduce using rule 39 (scripted -> char SUB char SUP block .)
    NOT             reduce using rule 39 (scripted -> char SUB char SUP block .)
    FUNC            reduce using rule 39 (scripted -> char SUB char SUP block .)
    LARGEOP         reduce using rule 39 (scripted -> char SUB char SUP block .)
    ORD             reduce using rule 39 (scripted -> char SUB char SUP block .)
    $end            reduce using rule 39 (scripted -> char SUB char SUP block .)
    ENDBLOCK        reduce using rule 39 (scripted -> char SUB char SUP block .)
    ENDSBLOCK       reduce using rule 39 (scripted -> char SUB char SUP block .)


state 80

    (40) scripted -> char SUB block SUP char .

    BEGINBLOCK      reduce using rule 40 (scripted -> char SUB block SUP char .)
    CHAR            reduce using rule 40 (scripted -> char SUB block SUP char .)
    FRAC            reduce using rule 40 (scripted -> char SUB block SUP char .)
    ROOT            reduce using rule 40 (scripted -> char SUB block SUP char .)
    BINOP           reduce using rule 40 (scripted -> char SUB block SUP char .)
    KBINOP          reduce using rule 40 (scripted -> char SUB block SUP char .)
    BINREL          reduce using rule 40 (scripted -> char SUB block SUP char .)
    KBINREL         reduce using rule 40 (scripted -> char SUB block SUP char .)
    NOT             reduce using rule 40 (scripted -> char SUB block SUP char .)
    FUNC            reduce using rule 40 (scripted -> char SUB block SUP char .)
    LARGEOP         reduce using rule 40 (scripted -> char SUB block SUP char .)
    ORD             reduce using rule 40 (scripted -> char SUB block SUP char .)
    $end            reduce using rule 40 (scripted -> char SUB block SUP char .)
    ENDBLOCK        reduce using rule 40 (scripted -> char SUB block SUP char .)
    ENDSBLOCK       reduce using rule 40 (scripted -> char SUB block SUP char .)


state 81

    (41) scripted -> char SUB block SUP block .

    BEGINBLOCK      reduce using rule 41 (scripted -> char SUB block SUP block .)
    CHAR            reduce using rule 41 (scripted -> char SUB block SUP block .)
    FRAC            reduce using rule 41 (scripted -> char SUB block SUP block .)
    ROOT            reduce using rule 41 (scripted -> char SUB block SUP block .)
    BINOP           reduce using rule 41 (scripted -> char SUB block SUP block .)
    KBINOP          reduce using rule 41 (scripted -> char SUB block SUP block .)
    BINREL          reduce using rule 41 (scripted -> char SUB block SUP block .)
    KBINREL         reduce using rule 41 (scripted -> char SUB block SUP block .)
    NOT             reduce using rule 41 (scripted -> char SUB block SUP block .)
    FUNC            reduce using rule 41 (scripted -> char SUB block SUP block .)
    LARGEOP         reduce using rule 41 (scripted -> char SUB block SUP block .)
    ORD             reduce using rule 41 (scripted -> char SUB block SUP block .)
    $end            reduce using rule 41 (scripted -> char SUB block SUP block .)
    ENDBLOCK        reduce using rule 41 (scripted -> char SUB block SUP block .)
    ENDSBLOCK       reduce using rule 41 (scripted -> char SUB block SUP block .)


state 82

    (30) scripted -> char SUP char SUB char .

    BEGINBLOCK      reduce using rule 30 (scripted -> char SUP char SUB char .)
    CHAR            reduce using rule 30 (scripted -> char SUP char SUB char .)
    FRAC            reduce using rule 30 (scripted -> char SUP char SUB char .)
    ROOT            reduce using rule 30 (scripted -> char SUP char SUB char .)
    BINOP           reduce using rule 30 (scripted -> char SUP char SUB char .)
    KBINOP          reduce using rule 30 (scripted -> char SUP char SUB char .)
    BINREL          reduce using rule 30 (scripted -> char SUP char SUB char .)
    KBINREL         reduce using rule 30 (scripted -> char SUP char SUB char .)
    NOT             reduce using rule 30 (scripted -> char SUP char SUB char .)
    FUNC            reduce using rule 30 (scripted -> char SUP char SUB char .)
    LARGEOP         reduce using rule 30 (scripted -> char SUP char SUB char .)
    ORD             reduce using rule 30 (scripted -> char SUP char SUB char .)
    $end            reduce using rule 30 (scripted -> char SUP char SUB char .)
    ENDBLOCK        reduce using rule 30 (scripted -> char SUP char SUB char .)
    ENDSBLOCK       reduce using rule 30 (scripted -> char SUP char SUB char .)


state 83

    (31) scripted -> char SUP char SUB block .

    BEGINBLOCK      reduce using rule 31 (scripted -> char SUP char SUB block .)
    CHAR            reduce using rule 31 (scripted -> char SUP char SUB block .)
    FRAC            reduce using rule 31 (scripted -> char SUP char SUB block .)
    ROOT            reduce using rule 31 (scripted -> char SUP char SUB block .)
    BINOP           reduce using rule 31 (scripted -> char SUP char SUB block .)
    KBINOP          reduce using rule 31 (scripted -> char SUP char SUB block .)
    BINREL          reduce using rule 31 (scripted -> char SUP char SUB block .)
    KBINREL         reduce using rule 31 (scripted -> char SUP char SUB block .)
    NOT             reduce using rule 31 (scripted -> char SUP char SUB block .)
    FUNC            reduce using rule 31 (scripted -> char SUP char SUB block .)
    LARGEOP         reduce using rule 31 (scripted -> char SUP char SUB block .)
    ORD             reduce using rule 31 (scripted -> char SUP char SUB block .)
    $end            reduce using rule 31 (scripted -> char SUP char SUB block .)
    ENDBLOCK        reduce using rule 31 (scripted -> char SUP char SUB block .)
    ENDSBLOCK       reduce using rule 31 (scripted -> char SUP char SUB block .)


state 84

    (32) scripted -> char SUP block SUB char .

    BEGINBLOCK      reduce using rule 32 (scripted -> char SUP block SUB char .)
    CHAR            reduce using rule 32 (scripted -> char SUP block SUB char .)
    FRAC            reduce using rule 32 (scripted -> char SUP block SUB char .)
    ROOT            reduce using rule 32 (scripted -> char SUP block SUB char .)
    BINOP           reduce using rule 32 (scripted -> char SUP block SUB char .)
    KBINOP          reduce using rule 32 (scripted -> char SUP block SUB char .)
    BINREL          reduce using rule 32 (scripted -> char SUP block SUB char .)
    KBINREL         reduce using rule 32 (scripted -> char SUP block SUB char .)
    NOT             reduce using rule 32 (scripted -> char SUP block SUB char .)
    FUNC            reduce using rule 32 (scripted -> char SUP block SUB char .)
    LARGEOP         reduce using rule 32 (scripted -> char SUP block SUB char .)
    ORD             reduce using rule 32 (scripted -> char SUP block SUB char .)
    $end            reduce using rule 32 (scripted -> char SUP block SUB char .)
    ENDBLOCK        reduce using rule 32 (scripted -> char SUP block SUB char .)
    ENDSBLOCK       reduce using rule 32 (scripted -> char SUP block SUB char .)


state 85

    (33) scripted -> char SUP block SUB block .

    BEGINBLOCK      reduce using rule 33 (scripted -> char SUP block SUB block .)
    CHAR            reduce using rule 33 (scripted -> char SUP block SUB block .)
    FRAC            reduce using rule 33 (scripted -> char SUP block SUB block .)
    ROOT            reduce using rule 33 (scripted -> char SUP block SUB block .)
    BINOP           reduce using rule 33 (scripted -> char SUP block SUB block .)
    KBINOP          reduce using rule 33 (scripted -> char SUP block SUB block .)
    BINREL          reduce using rule 33 (scripted -> char SUP block SUB block .)
    KBINREL         reduce using rule 33 (scripted -> char SUP block SUB block .)
    NOT             reduce using rule 33 (scripted -> char SUP block SUB block .)
    FUNC            reduce using rule 33 (scripted -> char SUP block SUB block .)
    LARGEOP         reduce using rule 33 (scripted -> char SUP block SUB block .)
    ORD             reduce using rule 33 (scripted -> char SUP block SUB block .)
    $end            reduce using rule 33 (scripted -> char SUP block SUB block .)
    ENDBLOCK        reduce using rule 33 (scripted -> char SUP block SUB block .)
    ENDSBLOCK       reduce using rule 33 (scripted -> char SUP block SUB block .)


state 86

    (64) larop -> LARGEOP SUP char SUB char .

    BEGINBLOCK      reduce using rule 64 (larop -> LARGEOP SUP char SUB char .)
    CHAR            reduce using rule 64 (larop -> LARGEOP SUP char SUB char .)
    FRAC            reduce using rule 64 (larop -> LARGEOP SUP char SUB char .)
    ROOT            reduce using rule 64 (larop -> LARGEOP SUP char SUB char .)
    BINOP           reduce using rule 64 (larop -> LARGEOP SUP char SUB char .)
    KBINOP          reduce using rule 64 (larop -> LARGEOP SUP char SUB char .)
    BINREL          reduce using rule 64 (larop -> LARGEOP SUP char SUB char .)
    KBINREL         reduce using rule 64 (larop -> LARGEOP SUP char SUB char .)
    NOT             reduce using rule 64 (larop -> LARGEOP SUP char SUB char .)
    FUNC            reduce using rule 64 (larop -> LARGEOP SUP char SUB char .)
    LARGEOP         reduce using rule 64 (larop -> LARGEOP SUP char SUB char .)
    ORD             reduce using rule 64 (larop -> LARGEOP SUP char SUB char .)
    ENDBLOCK        reduce using rule 64 (larop -> LARGEOP SUP char SUB char .)
    $end            reduce using rule 64 (larop -> LARGEOP SUP char SUB char .)
    ENDSBLOCK       reduce using rule 64 (larop -> LARGEOP SUP char SUB char .)


state 87

    (65) larop -> LARGEOP SUP char SUB block .

    BEGINBLOCK      reduce using rule 65 (larop -> LARGEOP SUP char SUB block .)
    CHAR            reduce using rule 65 (larop -> LARGEOP SUP char SUB block .)
    FRAC            reduce using rule 65 (larop -> LARGEOP SUP char SUB block .)
    ROOT            reduce using rule 65 (larop -> LARGEOP SUP char SUB block .)
    BINOP           reduce using rule 65 (larop -> LARGEOP SUP char SUB block .)
    KBINOP          reduce using rule 65 (larop -> LARGEOP SUP char SUB block .)
    BINREL          reduce using rule 65 (larop -> LARGEOP SUP char SUB block .)
    KBINREL         reduce using rule 65 (larop -> LARGEOP SUP char SUB block .)
    NOT             reduce using rule 65 (larop -> LARGEOP SUP char SUB block .)
    FUNC            reduce using rule 65 (larop -> LARGEOP SUP char SUB block .)
    LARGEOP         reduce using rule 65 (larop -> LARGEOP SUP char SUB block .)
    ORD             reduce using rule 65 (larop -> LARGEOP SUP char SUB block .)
    ENDBLOCK        reduce using rule 65 (larop -> LARGEOP SUP char SUB block .)
    $end            reduce using rule 65 (larop -> LARGEOP SUP char SUB block .)
    ENDSBLOCK       reduce using rule 65 (larop -> LARGEOP SUP char SUB block .)


state 88

    (66) larop -> LARGEOP SUP block SUB char .

    BEGINBLOCK      reduce using rule 66 (larop -> LARGEOP SUP block SUB char .)
    CHAR            reduce using rule 66 (larop -> LARGEOP SUP block SUB char .)
    FRAC            reduce using rule 66 (larop -> LARGEOP SUP block SUB char .)
    ROOT            reduce using rule 66 (larop -> LARGEOP SUP block SUB char .)
    BINOP           reduce using rule 66 (larop -> LARGEOP SUP block SUB char .)
    KBINOP          reduce using rule 66 (larop -> LARGEOP SUP block SUB char .)
    BINREL          reduce using rule 66 (larop -> LARGEOP SUP block SUB char .)
    KBINREL         reduce using rule 66 (larop -> LARGEOP SUP block SUB char .)
    NOT             reduce using rule 66 (larop -> LARGEOP SUP block SUB char .)
    FUNC            reduce using rule 66 (larop -> LARGEOP SUP block SUB char .)
    LARGEOP         reduce using rule 66 (larop -> LARGEOP SUP block SUB char .)
    ORD             reduce using rule 66 (larop -> LARGEOP SUP block SUB char .)
    ENDBLOCK        reduce using rule 66 (larop -> LARGEOP SUP block SUB char .)
    $end            reduce using rule 66 (larop -> LARGEOP SUP block SUB char .)
    ENDSBLOCK       reduce using rule 66 (larop -> LARGEOP SUP block SUB char .)


state 89

    (67) larop -> LARGEOP SUP block SUB block .

    BEGINBLOCK      reduce using rule 67 (larop -> LARGEOP SUP block SUB block .)
    CHAR            reduce using rule 67 (larop -> LARGEOP SUP block SUB block .)
    FRAC            reduce using rule 67 (larop -> LARGEOP SUP block SUB block .)
    ROOT            reduce using rule 67 (larop -> LARGEOP SUP block SUB block .)
    BINOP           reduce using rule 67 (larop -> LARGEOP SUP block SUB block .)
    KBINOP          reduce using rule 67 (larop -> LARGEOP SUP block SUB block .)
    BINREL          reduce using rule 67 (larop -> LARGEOP SUP block SUB block .)
    KBINREL         reduce using rule 67 (larop -> LARGEOP SUP block SUB block .)
    NOT             reduce using rule 67 (larop -> LARGEOP SUP block SUB block .)
    FUNC            reduce using rule 67 (larop -> LARGEOP SUP block SUB block .)
    LARGEOP         reduce using rule 67 (larop -> LARGEOP SUP block SUB block .)
    ORD             reduce using rule 67 (larop -> LARGEOP SUP block SUB block .)
    ENDBLOCK        reduce using rule 67 (larop -> LARGEOP SUP block SUB block .)
    $end            reduce using rule 67 (larop -> LARGEOP SUP block SUB block .)
    ENDSBLOCK       reduce using rule 67 (larop -> LARGEOP SUP block SUB block .)


state 90

    (60) larop -> LARGEOP SUB char SUP char .

    BEGINBLOCK      reduce using rule 60 (larop -> LARGEOP SUB char SUP char .)
    CHAR            reduce using rule 60 (larop -> LARGEOP SUB char SUP char .)
    FRAC            reduce using rule 60 (larop -> LARGEOP SUB char SUP char .)
    ROOT            reduce using rule 60 (larop -> LARGEOP SUB char SUP char .)
    BINOP           reduce using rule 60 (larop -> LARGEOP SUB char SUP char .)
    KBINOP          reduce using rule 60 (larop -> LARGEOP SUB char SUP char .)
    BINREL          reduce using rule 60 (larop -> LARGEOP SUB char SUP char .)
    KBINREL         reduce using rule 60 (larop -> LARGEOP SUB char SUP char .)
    NOT             reduce using rule 60 (larop -> LARGEOP SUB char SUP char .)
    FUNC            reduce using rule 60 (larop -> LARGEOP SUB char SUP char .)
    LARGEOP         reduce using rule 60 (larop -> LARGEOP SUB char SUP char .)
    ORD             reduce using rule 60 (larop -> LARGEOP SUB char SUP char .)
    ENDBLOCK        reduce using rule 60 (larop -> LARGEOP SUB char SUP char .)
    $end            reduce using rule 60 (larop -> LARGEOP SUB char SUP char .)
    ENDSBLOCK       reduce using rule 60 (larop -> LARGEOP SUB char SUP char .)


state 91

    (61) larop -> LARGEOP SUB char SUP block .

    BEGINBLOCK      reduce using rule 61 (larop -> LARGEOP SUB char SUP block .)
    CHAR            reduce using rule 61 (larop -> LARGEOP SUB char SUP block .)
    FRAC            reduce using rule 61 (larop -> LARGEOP SUB char SUP block .)
    ROOT            reduce using rule 61 (larop -> LARGEOP SUB char SUP block .)
    BINOP           reduce using rule 61 (larop -> LARGEOP SUB char SUP block .)
    KBINOP          reduce using rule 61 (larop -> LARGEOP SUB char SUP block .)
    BINREL          reduce using rule 61 (larop -> LARGEOP SUB char SUP block .)
    KBINREL         reduce using rule 61 (larop -> LARGEOP SUB char SUP block .)
    NOT             reduce using rule 61 (larop -> LARGEOP SUB char SUP block .)
    FUNC            reduce using rule 61 (larop -> LARGEOP SUB char SUP block .)
    LARGEOP         reduce using rule 61 (larop -> LARGEOP SUB char SUP block .)
    ORD             reduce using rule 61 (larop -> LARGEOP SUB char SUP block .)
    ENDBLOCK        reduce using rule 61 (larop -> LARGEOP SUB char SUP block .)
    $end            reduce using rule 61 (larop -> LARGEOP SUB char SUP block .)
    ENDSBLOCK       reduce using rule 61 (larop -> LARGEOP SUB char SUP block .)


state 92

    (62) larop -> LARGEOP SUB block SUP char .

    BEGINBLOCK      reduce using rule 62 (larop -> LARGEOP SUB block SUP char .)
    CHAR            reduce using rule 62 (larop -> LARGEOP SUB block SUP char .)
    FRAC            reduce using rule 62 (larop -> LARGEOP SUB block SUP char .)
    ROOT            reduce using rule 62 (larop -> LARGEOP SUB block SUP char .)
    BINOP           reduce using rule 62 (larop -> LARGEOP SUB block SUP char .)
    KBINOP          reduce using rule 62 (larop -> LARGEOP SUB block SUP char .)
    BINREL          reduce using rule 62 (larop -> LARGEOP SUB block SUP char .)
    KBINREL         reduce using rule 62 (larop -> LARGEOP SUB block SUP char .)
    NOT             reduce using rule 62 (larop -> LARGEOP SUB block SUP char .)
    FUNC            reduce using rule 62 (larop -> LARGEOP SUB block SUP char .)
    LARGEOP         reduce using rule 62 (larop -> LARGEOP SUB block SUP char .)
    ORD             reduce using rule 62 (larop -> LARGEOP SUB block SUP char .)
    ENDBLOCK        reduce using rule 62 (larop -> LARGEOP SUB block SUP char .)
    $end            reduce using rule 62 (larop -> LARGEOP SUB block SUP char .)
    ENDSBLOCK       reduce using rule 62 (larop -> LARGEOP SUB block SUP char .)


state 93

    (63) larop -> LARGEOP SUB block SUP block .

    BEGINBLOCK      reduce using rule 63 (larop -> LARGEOP SUB block SUP block .)
    CHAR            reduce using rule 63 (larop -> LARGEOP SUB block SUP block .)
    FRAC            reduce using rule 63 (larop -> LARGEOP SUB block SUP block .)
    ROOT            reduce using rule 63 (larop -> LARGEOP SUB block SUP block .)
    BINOP           reduce using rule 63 (larop -> LARGEOP SUB block SUP block .)
    KBINOP          reduce using rule 63 (larop -> LARGEOP SUB block SUP block .)
    BINREL          reduce using rule 63 (larop -> LARGEOP SUB block SUP block .)
    KBINREL         reduce using rule 63 (larop -> LARGEOP SUB block SUP block .)
    NOT             reduce using rule 63 (larop -> LARGEOP SUB block SUP block .)
    FUNC            reduce using rule 63 (larop -> LARGEOP SUB block SUP block .)
    LARGEOP         reduce using rule 63 (larop -> LARGEOP SUB block SUP block .)
    ORD             reduce using rule 63 (larop -> LARGEOP SUB block SUP block .)
    ENDBLOCK        reduce using rule 63 (larop -> LARGEOP SUB block SUP block .)
    $end            reduce using rule 63 (larop -> LARGEOP SUB block SUP block .)
    ENDSBLOCK       reduce using rule 63 (larop -> LARGEOP SUB block SUP block .)


state 94

    (42) scripted -> block SUB char SUP char .

    BEGINBLOCK      reduce using rule 42 (scripted -> block SUB char SUP char .)
    CHAR            reduce using rule 42 (scripted -> block SUB char SUP char .)
    FRAC            reduce using rule 42 (scripted -> block SUB char SUP char .)
    ROOT            reduce using rule 42 (scripted -> block SUB char SUP char .)
    BINOP           reduce using rule 42 (scripted -> block SUB char SUP char .)
    KBINOP          reduce using rule 42 (scripted -> block SUB char SUP char .)
    BINREL          reduce using rule 42 (scripted -> block SUB char SUP char .)
    KBINREL         reduce using rule 42 (scripted -> block SUB char SUP char .)
    NOT             reduce using rule 42 (scripted -> block SUB char SUP char .)
    FUNC            reduce using rule 42 (scripted -> block SUB char SUP char .)
    LARGEOP         reduce using rule 42 (scripted -> block SUB char SUP char .)
    ORD             reduce using rule 42 (scripted -> block SUB char SUP char .)
    $end            reduce using rule 42 (scripted -> block SUB char SUP char .)
    ENDBLOCK        reduce using rule 42 (scripted -> block SUB char SUP char .)
    ENDSBLOCK       reduce using rule 42 (scripted -> block SUB char SUP char .)


state 95

    (43) scripted -> block SUB char SUP block .

    BEGINBLOCK      reduce using rule 43 (scripted -> block SUB char SUP block .)
    CHAR            reduce using rule 43 (scripted -> block SUB char SUP block .)
    FRAC            reduce using rule 43 (scripted -> block SUB char SUP block .)
    ROOT            reduce using rule 43 (scripted -> block SUB char SUP block .)
    BINOP           reduce using rule 43 (scripted -> block SUB char SUP block .)
    KBINOP          reduce using rule 43 (scripted -> block SUB char SUP block .)
    BINREL          reduce using rule 43 (scripted -> block SUB char SUP block .)
    KBINREL         reduce using rule 43 (scripted -> block SUB char SUP block .)
    NOT             reduce using rule 43 (scripted -> block SUB char SUP block .)
    FUNC            reduce using rule 43 (scripted -> block SUB char SUP block .)
    LARGEOP         reduce using rule 43 (scripted -> block SUB char SUP block .)
    ORD             reduce using rule 43 (scripted -> block SUB char SUP block .)
    $end            reduce using rule 43 (scripted -> block SUB char SUP block .)
    ENDBLOCK        reduce using rule 43 (scripted -> block SUB char SUP block .)
    ENDSBLOCK       reduce using rule 43 (scripted -> block SUB char SUP block .)


state 96

    (44) scripted -> block SUB block SUP char .

    BEGINBLOCK      reduce using rule 44 (scripted -> block SUB block SUP char .)
    CHAR            reduce using rule 44 (scripted -> block SUB block SUP char .)
    FRAC            reduce using rule 44 (scripted -> block SUB block SUP char .)
    ROOT            reduce using rule 44 (scripted -> block SUB block SUP char .)
    BINOP           reduce using rule 44 (scripted -> block SUB block SUP char .)
    KBINOP          reduce using rule 44 (scripted -> block SUB block SUP char .)
    BINREL          reduce using rule 44 (scripted -> block SUB block SUP char .)
    KBINREL         reduce using rule 44 (scripted -> block SUB block SUP char .)
    NOT             reduce using rule 44 (scripted -> block SUB block SUP char .)
    FUNC            reduce using rule 44 (scripted -> block SUB block SUP char .)
    LARGEOP         reduce using rule 44 (scripted -> block SUB block SUP char .)
    ORD             reduce using rule 44 (scripted -> block SUB block SUP char .)
    $end            reduce using rule 44 (scripted -> block SUB block SUP char .)
    ENDBLOCK        reduce using rule 44 (scripted -> block SUB block SUP char .)
    ENDSBLOCK       reduce using rule 44 (scripted -> block SUB block SUP char .)


state 97

    (45) scripted -> block SUB block SUP block .

    BEGINBLOCK      reduce using rule 45 (scripted -> block SUB block SUP block .)
    CHAR            reduce using rule 45 (scripted -> block SUB block SUP block .)
    FRAC            reduce using rule 45 (scripted -> block SUB block SUP block .)
    ROOT            reduce using rule 45 (scripted -> block SUB block SUP block .)
    BINOP           reduce using rule 45 (scripted -> block SUB block SUP block .)
    KBINOP          reduce using rule 45 (scripted -> block SUB block SUP block .)
    BINREL          reduce using rule 45 (scripted -> block SUB block SUP block .)
    KBINREL         reduce using rule 45 (scripted -> block SUB block SUP block .)
    NOT             reduce using rule 45 (scripted -> block SUB block SUP block .)
    FUNC            reduce using rule 45 (scripted -> block SUB block SUP block .)
    LARGEOP         reduce using rule 45 (scripted -> block SUB block SUP block .)
    ORD             reduce using rule 45 (scripted -> block SUB block SUP block .)
    $end            reduce using rule 45 (scripted -> block SUB block SUP block .)
    ENDBLOCK        reduce using rule 45 (scripted -> block SUB block SUP block .)
    ENDSBLOCK       reduce using rule 45 (scripted -> block SUB block SUP block .)


state 98

    (34) scripted -> block SUP char SUB char .

    BEGINBLOCK      reduce using rule 34 (scripted -> block SUP char SUB char .)
    CHAR            reduce using rule 34 (scripted -> block SUP char SUB char .)
    FRAC            reduce using rule 34 (scripted -> block SUP char SUB char .)
    ROOT            reduce using rule 34 (scripted -> block SUP char SUB char .)
    BINOP           reduce using rule 34 (scripted -> block SUP char SUB char .)
    KBINOP          reduce using rule 34 (scripted -> block SUP char SUB char .)
    BINREL          reduce using rule 34 (scripted -> block SUP char SUB char .)
    KBINREL         reduce using rule 34 (scripted -> block SUP char SUB char .)
    NOT             reduce using rule 34 (scripted -> block SUP char SUB char .)
    FUNC            reduce using rule 34 (scripted -> block SUP char SUB char .)
    LARGEOP         reduce using rule 34 (scripted -> block SUP char SUB char .)
    ORD             reduce using rule 34 (scripted -> block SUP char SUB char .)
    $end            reduce using rule 34 (scripted -> block SUP char SUB char .)
    ENDBLOCK        reduce using rule 34 (scripted -> block SUP char SUB char .)
    ENDSBLOCK       reduce using rule 34 (scripted -> block SUP char SUB char .)


state 99

    (35) scripted -> block SUP char SUB block .

    BEGINBLOCK      reduce using rule 35 (scripted -> block SUP char SUB block .)
    CHAR            reduce using rule 35 (scripted -> block SUP char SUB block .)
    FRAC            reduce using rule 35 (scripted -> block SUP char SUB block .)
    ROOT            reduce using rule 35 (scripted -> block SUP char SUB block .)
    BINOP           reduce using rule 35 (scripted -> block SUP char SUB block .)
    KBINOP          reduce using rule 35 (scripted -> block SUP char SUB block .)
    BINREL          reduce using rule 35 (scripted -> block SUP char SUB block .)
    KBINREL         reduce using rule 35 (scripted -> block SUP char SUB block .)
    NOT             reduce using rule 35 (scripted -> block SUP char SUB block .)
    FUNC            reduce using rule 35 (scripted -> block SUP char SUB block .)
    LARGEOP         reduce using rule 35 (scripted -> block SUP char SUB block .)
    ORD             reduce using rule 35 (scripted -> block SUP char SUB block .)
    $end            reduce using rule 35 (scripted -> block SUP char SUB block .)
    ENDBLOCK        reduce using rule 35 (scripted -> block SUP char SUB block .)
    ENDSBLOCK       reduce using rule 35 (scripted -> block SUP char SUB block .)


state 100

    (36) scripted -> block SUP block SUB char .

    BEGINBLOCK      reduce using rule 36 (scripted -> block SUP block SUB char .)
    CHAR            reduce using rule 36 (scripted -> block SUP block SUB char .)
    FRAC            reduce using rule 36 (scripted -> block SUP block SUB char .)
    ROOT            reduce using rule 36 (scripted -> block SUP block SUB char .)
    BINOP           reduce using rule 36 (scripted -> block SUP block SUB char .)
    KBINOP          reduce using rule 36 (scripted -> block SUP block SUB char .)
    BINREL          reduce using rule 36 (scripted -> block SUP block SUB char .)
    KBINREL         reduce using rule 36 (scripted -> block SUP block SUB char .)
    NOT             reduce using rule 36 (scripted -> block SUP block SUB char .)
    FUNC            reduce using rule 36 (scripted -> block SUP block SUB char .)
    LARGEOP         reduce using rule 36 (scripted -> block SUP block SUB char .)
    ORD             reduce using rule 36 (scripted -> block SUP block SUB char .)
    $end            reduce using rule 36 (scripted -> block SUP block SUB char .)
    ENDBLOCK        reduce using rule 36 (scripted -> block SUP block SUB char .)
    ENDSBLOCK       reduce using rule 36 (scripted -> block SUP block SUB char .)


state 101

    (37) scripted -> block SUP block SUB block .

    BEGINBLOCK      reduce using rule 37 (scripted -> block SUP block SUB block .)
    CHAR            reduce using rule 37 (scripted -> block SUP block SUB block .)
    FRAC            reduce using rule 37 (scripted -> block SUP block SUB block .)
    ROOT            reduce using rule 37 (scripted -> block SUP block SUB block .)
    BINOP           reduce using rule 37 (scripted -> block SUP block SUB block .)
    KBINOP          reduce using rule 37 (scripted -> block SUP block SUB block .)
    BINREL          reduce using rule 37 (scripted -> block SUP block SUB block .)
    KBINREL         reduce using rule 37 (scripted -> block SUP block SUB block .)
    NOT             reduce using rule 37 (scripted -> block SUP block SUB block .)
    FUNC            reduce using rule 37 (scripted -> block SUP block SUB block .)
    LARGEOP         reduce using rule 37 (scripted -> block SUP block SUB block .)
    ORD             reduce using rule 37 (scripted -> block SUP block SUB block .)
    $end            reduce using rule 37 (scripted -> block SUP block SUB block .)
    ENDBLOCK        reduce using rule 37 (scripted -> block SUP block SUB block .)
    ENDSBLOCK       reduce using rule 37 (scripted -> block SUP block SUB block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CHAR in state 1 resolved as shift
WARNING: shift/reduce conflict for ORD in state 1 resolved as shift
WARNING: shift/reduce conflict for BEGINBLOCK in state 6 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 6 resolved as shift
WARNING: shift/reduce conflict for FRAC in state 6 resolved as shift
WARNING: shift/reduce conflict for ROOT in state 6 resolved as shift
WARNING: shift/reduce conflict for BINOP in state 6 resolved as shift
WARNING: shift/reduce conflict for KBINOP in state 6 resolved as shift
WARNING: shift/reduce conflict for BINREL in state 6 resolved as shift
WARNING: shift/reduce conflict for KBINREL in state 6 resolved as shift
WARNING: shift/reduce conflict for NOT in state 6 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 6 resolved as shift
WARNING: shift/reduce conflict for LARGEOP in state 6 resolved as shift
WARNING: shift/reduce conflict for ORD in state 6 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 30 resolved as shift
WARNING: shift/reduce conflict for ORD in state 30 resolved as shift
WARNING: shift/reduce conflict for BEGINBLOCK in state 35 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 35 resolved as shift
WARNING: shift/reduce conflict for FRAC in state 35 resolved as shift
WARNING: shift/reduce conflict for ROOT in state 35 resolved as shift
WARNING: shift/reduce conflict for BINOP in state 35 resolved as shift
WARNING: shift/reduce conflict for KBINOP in state 35 resolved as shift
WARNING: shift/reduce conflict for BINREL in state 35 resolved as shift
WARNING: shift/reduce conflict for KBINREL in state 35 resolved as shift
WARNING: shift/reduce conflict for NOT in state 35 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 35 resolved as shift
WARNING: shift/reduce conflict for LARGEOP in state 35 resolved as shift
WARNING: shift/reduce conflict for ORD in state 35 resolved as shift
WARNING: shift/reduce conflict for BEGINBLOCK in state 36 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 36 resolved as shift
WARNING: shift/reduce conflict for FRAC in state 36 resolved as shift
WARNING: shift/reduce conflict for ROOT in state 36 resolved as shift
WARNING: shift/reduce conflict for BINOP in state 36 resolved as shift
WARNING: shift/reduce conflict for KBINOP in state 36 resolved as shift
WARNING: shift/reduce conflict for BINREL in state 36 resolved as shift
WARNING: shift/reduce conflict for KBINREL in state 36 resolved as shift
WARNING: shift/reduce conflict for NOT in state 36 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 36 resolved as shift
WARNING: shift/reduce conflict for LARGEOP in state 36 resolved as shift
WARNING: shift/reduce conflict for ORD in state 36 resolved as shift
