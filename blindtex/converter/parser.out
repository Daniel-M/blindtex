Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    LARGEOP

Grammar

Rule 0     S' -> start
Rule 1     start -> content
Rule 2     sblock -> BEGINSBLOCK content ENDSBLOCK
Rule 3     block -> BEGINBLOCK content ENDBLOCK
Rule 4     content -> chars
Rule 5     content -> block
Rule 6     content -> scripted
Rule 7     content -> command
Rule 8     chars -> CHAR
Rule 9     chars -> ord
Rule 10    chars -> chars chars
Rule 11    ord -> ORD
Rule 12    command -> frac
Rule 13    command -> root
Rule 14    scripted -> content SUP content
Rule 15    scripted -> content SUB content
Rule 16    frac -> FRAC content content
Rule 17    root -> ROOT content
Rule 18    root -> ROOT sblock content

Terminals, with rules where they appear

BEGINBLOCK           : 3
BEGINSBLOCK          : 2
CHAR                 : 8
ENDBLOCK             : 3
ENDSBLOCK            : 2
FRAC                 : 16
LARGEOP              : 
ORD                  : 11
ROOT                 : 17 18
SUB                  : 15
SUP                  : 14
error                : 

Nonterminals, with rules where they appear

block                : 5
chars                : 4 10 10
command              : 7
content              : 1 2 3 14 14 15 15 16 16 17 18
frac                 : 12
ord                  : 9
root                 : 13
sblock               : 18
scripted             : 6
start                : 0

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . content
    (4) content -> . chars
    (5) content -> . block
    (6) content -> . scripted
    (7) content -> . command
    (8) chars -> . CHAR
    (9) chars -> . ord
    (10) chars -> . chars chars
    (3) block -> . BEGINBLOCK content ENDBLOCK
    (14) scripted -> . content SUP content
    (15) scripted -> . content SUB content
    (12) command -> . frac
    (13) command -> . root
    (11) ord -> . ORD
    (16) frac -> . FRAC content content
    (17) root -> . ROOT content
    (18) root -> . ROOT sblock content

    CHAR            shift and go to state 2
    BEGINBLOCK      shift and go to state 12
    ORD             shift and go to state 13
    FRAC            shift and go to state 1
    ROOT            shift and go to state 7

    frac                           shift and go to state 3
    chars                          shift and go to state 4
    content                        shift and go to state 5
    start                          shift and go to state 6
    command                        shift and go to state 8
    block                          shift and go to state 9
    ord                            shift and go to state 11
    root                           shift and go to state 10
    scripted                       shift and go to state 14

state 1

    (16) frac -> FRAC . content content
    (4) content -> . chars
    (5) content -> . block
    (6) content -> . scripted
    (7) content -> . command
    (8) chars -> . CHAR
    (9) chars -> . ord
    (10) chars -> . chars chars
    (3) block -> . BEGINBLOCK content ENDBLOCK
    (14) scripted -> . content SUP content
    (15) scripted -> . content SUB content
    (12) command -> . frac
    (13) command -> . root
    (11) ord -> . ORD
    (16) frac -> . FRAC content content
    (17) root -> . ROOT content
    (18) root -> . ROOT sblock content

    CHAR            shift and go to state 2
    BEGINBLOCK      shift and go to state 12
    ORD             shift and go to state 13
    FRAC            shift and go to state 1
    ROOT            shift and go to state 7

    frac                           shift and go to state 3
    chars                          shift and go to state 4
    content                        shift and go to state 15
    command                        shift and go to state 8
    block                          shift and go to state 9
    ord                            shift and go to state 11
    root                           shift and go to state 10
    scripted                       shift and go to state 14

state 2

    (8) chars -> CHAR .

    CHAR            reduce using rule 8 (chars -> CHAR .)
    ORD             reduce using rule 8 (chars -> CHAR .)
    SUP             reduce using rule 8 (chars -> CHAR .)
    SUB             reduce using rule 8 (chars -> CHAR .)
    $end            reduce using rule 8 (chars -> CHAR .)
    BEGINBLOCK      reduce using rule 8 (chars -> CHAR .)
    FRAC            reduce using rule 8 (chars -> CHAR .)
    ROOT            reduce using rule 8 (chars -> CHAR .)
    ENDBLOCK        reduce using rule 8 (chars -> CHAR .)
    ENDSBLOCK       reduce using rule 8 (chars -> CHAR .)


state 3

    (12) command -> frac .

    ENDSBLOCK       reduce using rule 12 (command -> frac .)
    SUP             reduce using rule 12 (command -> frac .)
    SUB             reduce using rule 12 (command -> frac .)
    ENDBLOCK        reduce using rule 12 (command -> frac .)
    $end            reduce using rule 12 (command -> frac .)
    CHAR            reduce using rule 12 (command -> frac .)
    BEGINBLOCK      reduce using rule 12 (command -> frac .)
    ORD             reduce using rule 12 (command -> frac .)
    FRAC            reduce using rule 12 (command -> frac .)
    ROOT            reduce using rule 12 (command -> frac .)


state 4

    (4) content -> chars .
    (10) chars -> chars . chars
    (8) chars -> . CHAR
    (9) chars -> . ord
    (10) chars -> . chars chars
    (11) ord -> . ORD

  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for ORD resolved as shift
    SUP             reduce using rule 4 (content -> chars .)
    SUB             reduce using rule 4 (content -> chars .)
    BEGINBLOCK      reduce using rule 4 (content -> chars .)
    FRAC            reduce using rule 4 (content -> chars .)
    ROOT            reduce using rule 4 (content -> chars .)
    $end            reduce using rule 4 (content -> chars .)
    ENDBLOCK        reduce using rule 4 (content -> chars .)
    ENDSBLOCK       reduce using rule 4 (content -> chars .)
    CHAR            shift and go to state 2
    ORD             shift and go to state 13

  ! CHAR            [ reduce using rule 4 (content -> chars .) ]
  ! ORD             [ reduce using rule 4 (content -> chars .) ]

    chars                          shift and go to state 16
    ord                            shift and go to state 11

state 5

    (1) start -> content .
    (14) scripted -> content . SUP content
    (15) scripted -> content . SUB content

    $end            reduce using rule 1 (start -> content .)
    SUP             shift and go to state 18
    SUB             shift and go to state 17


state 6

    (0) S' -> start .



state 7

    (17) root -> ROOT . content
    (18) root -> ROOT . sblock content
    (4) content -> . chars
    (5) content -> . block
    (6) content -> . scripted
    (7) content -> . command
    (2) sblock -> . BEGINSBLOCK content ENDSBLOCK
    (8) chars -> . CHAR
    (9) chars -> . ord
    (10) chars -> . chars chars
    (3) block -> . BEGINBLOCK content ENDBLOCK
    (14) scripted -> . content SUP content
    (15) scripted -> . content SUB content
    (12) command -> . frac
    (13) command -> . root
    (11) ord -> . ORD
    (16) frac -> . FRAC content content
    (17) root -> . ROOT content
    (18) root -> . ROOT sblock content

    BEGINSBLOCK     shift and go to state 21
    CHAR            shift and go to state 2
    BEGINBLOCK      shift and go to state 12
    ORD             shift and go to state 13
    FRAC            shift and go to state 1
    ROOT            shift and go to state 7

    frac                           shift and go to state 3
    chars                          shift and go to state 4
    sblock                         shift and go to state 19
    content                        shift and go to state 20
    command                        shift and go to state 8
    block                          shift and go to state 9
    ord                            shift and go to state 11
    root                           shift and go to state 10
    scripted                       shift and go to state 14

state 8

    (7) content -> command .

    SUP             reduce using rule 7 (content -> command .)
    SUB             reduce using rule 7 (content -> command .)
    CHAR            reduce using rule 7 (content -> command .)
    BEGINBLOCK      reduce using rule 7 (content -> command .)
    ORD             reduce using rule 7 (content -> command .)
    FRAC            reduce using rule 7 (content -> command .)
    ROOT            reduce using rule 7 (content -> command .)
    $end            reduce using rule 7 (content -> command .)
    ENDBLOCK        reduce using rule 7 (content -> command .)
    ENDSBLOCK       reduce using rule 7 (content -> command .)


state 9

    (5) content -> block .

    SUP             reduce using rule 5 (content -> block .)
    SUB             reduce using rule 5 (content -> block .)
    CHAR            reduce using rule 5 (content -> block .)
    BEGINBLOCK      reduce using rule 5 (content -> block .)
    ORD             reduce using rule 5 (content -> block .)
    FRAC            reduce using rule 5 (content -> block .)
    ROOT            reduce using rule 5 (content -> block .)
    $end            reduce using rule 5 (content -> block .)
    ENDBLOCK        reduce using rule 5 (content -> block .)
    ENDSBLOCK       reduce using rule 5 (content -> block .)


state 10

    (13) command -> root .

    ENDSBLOCK       reduce using rule 13 (command -> root .)
    SUP             reduce using rule 13 (command -> root .)
    SUB             reduce using rule 13 (command -> root .)
    ENDBLOCK        reduce using rule 13 (command -> root .)
    $end            reduce using rule 13 (command -> root .)
    CHAR            reduce using rule 13 (command -> root .)
    BEGINBLOCK      reduce using rule 13 (command -> root .)
    ORD             reduce using rule 13 (command -> root .)
    FRAC            reduce using rule 13 (command -> root .)
    ROOT            reduce using rule 13 (command -> root .)


state 11

    (9) chars -> ord .

    CHAR            reduce using rule 9 (chars -> ord .)
    ORD             reduce using rule 9 (chars -> ord .)
    SUP             reduce using rule 9 (chars -> ord .)
    SUB             reduce using rule 9 (chars -> ord .)
    $end            reduce using rule 9 (chars -> ord .)
    BEGINBLOCK      reduce using rule 9 (chars -> ord .)
    FRAC            reduce using rule 9 (chars -> ord .)
    ROOT            reduce using rule 9 (chars -> ord .)
    ENDBLOCK        reduce using rule 9 (chars -> ord .)
    ENDSBLOCK       reduce using rule 9 (chars -> ord .)


state 12

    (3) block -> BEGINBLOCK . content ENDBLOCK
    (4) content -> . chars
    (5) content -> . block
    (6) content -> . scripted
    (7) content -> . command
    (8) chars -> . CHAR
    (9) chars -> . ord
    (10) chars -> . chars chars
    (3) block -> . BEGINBLOCK content ENDBLOCK
    (14) scripted -> . content SUP content
    (15) scripted -> . content SUB content
    (12) command -> . frac
    (13) command -> . root
    (11) ord -> . ORD
    (16) frac -> . FRAC content content
    (17) root -> . ROOT content
    (18) root -> . ROOT sblock content

    CHAR            shift and go to state 2
    BEGINBLOCK      shift and go to state 12
    ORD             shift and go to state 13
    FRAC            shift and go to state 1
    ROOT            shift and go to state 7

    frac                           shift and go to state 3
    chars                          shift and go to state 4
    content                        shift and go to state 22
    command                        shift and go to state 8
    block                          shift and go to state 9
    ord                            shift and go to state 11
    root                           shift and go to state 10
    scripted                       shift and go to state 14

state 13

    (11) ord -> ORD .

    CHAR            reduce using rule 11 (ord -> ORD .)
    ORD             reduce using rule 11 (ord -> ORD .)
    ENDSBLOCK       reduce using rule 11 (ord -> ORD .)
    SUP             reduce using rule 11 (ord -> ORD .)
    SUB             reduce using rule 11 (ord -> ORD .)
    $end            reduce using rule 11 (ord -> ORD .)
    BEGINBLOCK      reduce using rule 11 (ord -> ORD .)
    FRAC            reduce using rule 11 (ord -> ORD .)
    ROOT            reduce using rule 11 (ord -> ORD .)
    ENDBLOCK        reduce using rule 11 (ord -> ORD .)


state 14

    (6) content -> scripted .

    SUP             reduce using rule 6 (content -> scripted .)
    SUB             reduce using rule 6 (content -> scripted .)
    CHAR            reduce using rule 6 (content -> scripted .)
    BEGINBLOCK      reduce using rule 6 (content -> scripted .)
    ORD             reduce using rule 6 (content -> scripted .)
    FRAC            reduce using rule 6 (content -> scripted .)
    ROOT            reduce using rule 6 (content -> scripted .)
    $end            reduce using rule 6 (content -> scripted .)
    ENDBLOCK        reduce using rule 6 (content -> scripted .)
    ENDSBLOCK       reduce using rule 6 (content -> scripted .)


state 15

    (16) frac -> FRAC content . content
    (14) scripted -> content . SUP content
    (15) scripted -> content . SUB content
    (4) content -> . chars
    (5) content -> . block
    (6) content -> . scripted
    (7) content -> . command
    (8) chars -> . CHAR
    (9) chars -> . ord
    (10) chars -> . chars chars
    (3) block -> . BEGINBLOCK content ENDBLOCK
    (14) scripted -> . content SUP content
    (15) scripted -> . content SUB content
    (12) command -> . frac
    (13) command -> . root
    (11) ord -> . ORD
    (16) frac -> . FRAC content content
    (17) root -> . ROOT content
    (18) root -> . ROOT sblock content

    SUP             shift and go to state 18
    SUB             shift and go to state 17
    CHAR            shift and go to state 2
    BEGINBLOCK      shift and go to state 12
    ORD             shift and go to state 13
    FRAC            shift and go to state 1
    ROOT            shift and go to state 7

    frac                           shift and go to state 3
    chars                          shift and go to state 4
    content                        shift and go to state 23
    command                        shift and go to state 8
    block                          shift and go to state 9
    ord                            shift and go to state 11
    root                           shift and go to state 10
    scripted                       shift and go to state 14

state 16

    (10) chars -> chars chars .
    (10) chars -> chars . chars
    (8) chars -> . CHAR
    (9) chars -> . ord
    (10) chars -> . chars chars
    (11) ord -> . ORD

  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for ORD resolved as shift
    SUP             reduce using rule 10 (chars -> chars chars .)
    SUB             reduce using rule 10 (chars -> chars chars .)
    $end            reduce using rule 10 (chars -> chars chars .)
    BEGINBLOCK      reduce using rule 10 (chars -> chars chars .)
    FRAC            reduce using rule 10 (chars -> chars chars .)
    ROOT            reduce using rule 10 (chars -> chars chars .)
    ENDBLOCK        reduce using rule 10 (chars -> chars chars .)
    ENDSBLOCK       reduce using rule 10 (chars -> chars chars .)
    CHAR            shift and go to state 2
    ORD             shift and go to state 13

  ! CHAR            [ reduce using rule 10 (chars -> chars chars .) ]
  ! ORD             [ reduce using rule 10 (chars -> chars chars .) ]

    chars                          shift and go to state 16
    ord                            shift and go to state 11

state 17

    (15) scripted -> content SUB . content
    (4) content -> . chars
    (5) content -> . block
    (6) content -> . scripted
    (7) content -> . command
    (8) chars -> . CHAR
    (9) chars -> . ord
    (10) chars -> . chars chars
    (3) block -> . BEGINBLOCK content ENDBLOCK
    (14) scripted -> . content SUP content
    (15) scripted -> . content SUB content
    (12) command -> . frac
    (13) command -> . root
    (11) ord -> . ORD
    (16) frac -> . FRAC content content
    (17) root -> . ROOT content
    (18) root -> . ROOT sblock content

    CHAR            shift and go to state 2
    BEGINBLOCK      shift and go to state 12
    ORD             shift and go to state 13
    FRAC            shift and go to state 1
    ROOT            shift and go to state 7

    frac                           shift and go to state 3
    chars                          shift and go to state 4
    content                        shift and go to state 24
    command                        shift and go to state 8
    block                          shift and go to state 9
    ord                            shift and go to state 11
    root                           shift and go to state 10
    scripted                       shift and go to state 14

state 18

    (14) scripted -> content SUP . content
    (4) content -> . chars
    (5) content -> . block
    (6) content -> . scripted
    (7) content -> . command
    (8) chars -> . CHAR
    (9) chars -> . ord
    (10) chars -> . chars chars
    (3) block -> . BEGINBLOCK content ENDBLOCK
    (14) scripted -> . content SUP content
    (15) scripted -> . content SUB content
    (12) command -> . frac
    (13) command -> . root
    (11) ord -> . ORD
    (16) frac -> . FRAC content content
    (17) root -> . ROOT content
    (18) root -> . ROOT sblock content

    CHAR            shift and go to state 2
    BEGINBLOCK      shift and go to state 12
    ORD             shift and go to state 13
    FRAC            shift and go to state 1
    ROOT            shift and go to state 7

    frac                           shift and go to state 3
    chars                          shift and go to state 4
    content                        shift and go to state 25
    command                        shift and go to state 8
    block                          shift and go to state 9
    ord                            shift and go to state 11
    root                           shift and go to state 10
    scripted                       shift and go to state 14

state 19

    (18) root -> ROOT sblock . content
    (4) content -> . chars
    (5) content -> . block
    (6) content -> . scripted
    (7) content -> . command
    (8) chars -> . CHAR
    (9) chars -> . ord
    (10) chars -> . chars chars
    (3) block -> . BEGINBLOCK content ENDBLOCK
    (14) scripted -> . content SUP content
    (15) scripted -> . content SUB content
    (12) command -> . frac
    (13) command -> . root
    (11) ord -> . ORD
    (16) frac -> . FRAC content content
    (17) root -> . ROOT content
    (18) root -> . ROOT sblock content

    CHAR            shift and go to state 2
    BEGINBLOCK      shift and go to state 12
    ORD             shift and go to state 13
    FRAC            shift and go to state 1
    ROOT            shift and go to state 7

    frac                           shift and go to state 3
    chars                          shift and go to state 4
    content                        shift and go to state 26
    command                        shift and go to state 8
    block                          shift and go to state 9
    ord                            shift and go to state 11
    root                           shift and go to state 10
    scripted                       shift and go to state 14

state 20

    (17) root -> ROOT content .
    (14) scripted -> content . SUP content
    (15) scripted -> content . SUB content

    ENDBLOCK        reduce using rule 17 (root -> ROOT content .)
    SUP             reduce using rule 17 (root -> ROOT content .)
    SUB             reduce using rule 17 (root -> ROOT content .)
    $end            reduce using rule 17 (root -> ROOT content .)
    CHAR            reduce using rule 17 (root -> ROOT content .)
    BEGINBLOCK      reduce using rule 17 (root -> ROOT content .)
    ORD             reduce using rule 17 (root -> ROOT content .)
    FRAC            reduce using rule 17 (root -> ROOT content .)
    ROOT            reduce using rule 17 (root -> ROOT content .)
    ENDSBLOCK       reduce using rule 17 (root -> ROOT content .)

  ! SUP             [ shift and go to state 18 ]
  ! SUB             [ shift and go to state 17 ]


state 21

    (2) sblock -> BEGINSBLOCK . content ENDSBLOCK
    (4) content -> . chars
    (5) content -> . block
    (6) content -> . scripted
    (7) content -> . command
    (8) chars -> . CHAR
    (9) chars -> . ord
    (10) chars -> . chars chars
    (3) block -> . BEGINBLOCK content ENDBLOCK
    (14) scripted -> . content SUP content
    (15) scripted -> . content SUB content
    (12) command -> . frac
    (13) command -> . root
    (11) ord -> . ORD
    (16) frac -> . FRAC content content
    (17) root -> . ROOT content
    (18) root -> . ROOT sblock content

    CHAR            shift and go to state 2
    BEGINBLOCK      shift and go to state 12
    ORD             shift and go to state 13
    FRAC            shift and go to state 1
    ROOT            shift and go to state 7

    frac                           shift and go to state 3
    chars                          shift and go to state 4
    content                        shift and go to state 27
    command                        shift and go to state 8
    block                          shift and go to state 9
    ord                            shift and go to state 11
    root                           shift and go to state 10
    scripted                       shift and go to state 14

state 22

    (3) block -> BEGINBLOCK content . ENDBLOCK
    (14) scripted -> content . SUP content
    (15) scripted -> content . SUB content

    ENDBLOCK        shift and go to state 28
    SUP             shift and go to state 18
    SUB             shift and go to state 17


state 23

    (16) frac -> FRAC content content .
    (14) scripted -> content . SUP content
    (15) scripted -> content . SUB content

    SUP             reduce using rule 16 (frac -> FRAC content content .)
    SUB             reduce using rule 16 (frac -> FRAC content content .)
    CHAR            reduce using rule 16 (frac -> FRAC content content .)
    BEGINBLOCK      reduce using rule 16 (frac -> FRAC content content .)
    ORD             reduce using rule 16 (frac -> FRAC content content .)
    FRAC            reduce using rule 16 (frac -> FRAC content content .)
    ROOT            reduce using rule 16 (frac -> FRAC content content .)
    $end            reduce using rule 16 (frac -> FRAC content content .)
    ENDBLOCK        reduce using rule 16 (frac -> FRAC content content .)
    ENDSBLOCK       reduce using rule 16 (frac -> FRAC content content .)

  ! SUP             [ shift and go to state 18 ]
  ! SUB             [ shift and go to state 17 ]


state 24

    (15) scripted -> content SUB content .
    (14) scripted -> content . SUP content
    (15) scripted -> content . SUB content

    ENDBLOCK        reduce using rule 15 (scripted -> content SUB content .)
    SUP             reduce using rule 15 (scripted -> content SUB content .)
    SUB             reduce using rule 15 (scripted -> content SUB content .)
    $end            reduce using rule 15 (scripted -> content SUB content .)
    CHAR            reduce using rule 15 (scripted -> content SUB content .)
    BEGINBLOCK      reduce using rule 15 (scripted -> content SUB content .)
    ORD             reduce using rule 15 (scripted -> content SUB content .)
    FRAC            reduce using rule 15 (scripted -> content SUB content .)
    ROOT            reduce using rule 15 (scripted -> content SUB content .)
    ENDSBLOCK       reduce using rule 15 (scripted -> content SUB content .)

  ! SUP             [ shift and go to state 18 ]
  ! SUB             [ shift and go to state 17 ]


state 25

    (14) scripted -> content SUP content .
    (14) scripted -> content . SUP content
    (15) scripted -> content . SUB content

    ENDBLOCK        reduce using rule 14 (scripted -> content SUP content .)
    SUP             reduce using rule 14 (scripted -> content SUP content .)
    SUB             reduce using rule 14 (scripted -> content SUP content .)
    $end            reduce using rule 14 (scripted -> content SUP content .)
    CHAR            reduce using rule 14 (scripted -> content SUP content .)
    BEGINBLOCK      reduce using rule 14 (scripted -> content SUP content .)
    ORD             reduce using rule 14 (scripted -> content SUP content .)
    FRAC            reduce using rule 14 (scripted -> content SUP content .)
    ROOT            reduce using rule 14 (scripted -> content SUP content .)
    ENDSBLOCK       reduce using rule 14 (scripted -> content SUP content .)

  ! SUP             [ shift and go to state 18 ]
  ! SUB             [ shift and go to state 17 ]


state 26

    (18) root -> ROOT sblock content .
    (14) scripted -> content . SUP content
    (15) scripted -> content . SUB content

    ENDBLOCK        reduce using rule 18 (root -> ROOT sblock content .)
    SUP             reduce using rule 18 (root -> ROOT sblock content .)
    SUB             reduce using rule 18 (root -> ROOT sblock content .)
    $end            reduce using rule 18 (root -> ROOT sblock content .)
    CHAR            reduce using rule 18 (root -> ROOT sblock content .)
    BEGINBLOCK      reduce using rule 18 (root -> ROOT sblock content .)
    ORD             reduce using rule 18 (root -> ROOT sblock content .)
    FRAC            reduce using rule 18 (root -> ROOT sblock content .)
    ROOT            reduce using rule 18 (root -> ROOT sblock content .)
    ENDSBLOCK       reduce using rule 18 (root -> ROOT sblock content .)

  ! SUP             [ shift and go to state 18 ]
  ! SUB             [ shift and go to state 17 ]


state 27

    (2) sblock -> BEGINSBLOCK content . ENDSBLOCK
    (14) scripted -> content . SUP content
    (15) scripted -> content . SUB content

    ENDSBLOCK       shift and go to state 29
    SUP             shift and go to state 18
    SUB             shift and go to state 17


state 28

    (3) block -> BEGINBLOCK content ENDBLOCK .

    SUP             reduce using rule 3 (block -> BEGINBLOCK content ENDBLOCK .)
    SUB             reduce using rule 3 (block -> BEGINBLOCK content ENDBLOCK .)
    $end            reduce using rule 3 (block -> BEGINBLOCK content ENDBLOCK .)
    CHAR            reduce using rule 3 (block -> BEGINBLOCK content ENDBLOCK .)
    BEGINBLOCK      reduce using rule 3 (block -> BEGINBLOCK content ENDBLOCK .)
    ORD             reduce using rule 3 (block -> BEGINBLOCK content ENDBLOCK .)
    FRAC            reduce using rule 3 (block -> BEGINBLOCK content ENDBLOCK .)
    ROOT            reduce using rule 3 (block -> BEGINBLOCK content ENDBLOCK .)
    ENDBLOCK        reduce using rule 3 (block -> BEGINBLOCK content ENDBLOCK .)
    ENDSBLOCK       reduce using rule 3 (block -> BEGINBLOCK content ENDBLOCK .)


state 29

    (2) sblock -> BEGINSBLOCK content ENDSBLOCK .

    CHAR            reduce using rule 2 (sblock -> BEGINSBLOCK content ENDSBLOCK .)
    BEGINBLOCK      reduce using rule 2 (sblock -> BEGINSBLOCK content ENDSBLOCK .)
    ORD             reduce using rule 2 (sblock -> BEGINSBLOCK content ENDSBLOCK .)
    FRAC            reduce using rule 2 (sblock -> BEGINSBLOCK content ENDSBLOCK .)
    ROOT            reduce using rule 2 (sblock -> BEGINSBLOCK content ENDSBLOCK .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CHAR in state 4 resolved as shift
WARNING: shift/reduce conflict for ORD in state 4 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 16 resolved as shift
WARNING: shift/reduce conflict for ORD in state 16 resolved as shift
